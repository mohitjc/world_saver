{"ast":null,"code":"var _jsxFileName = \"/home/jc-2/Documents/sociality-web/src/pages/Users.js\";\nimport React, { useState, useEffect } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport swal from 'sweetalert';\nimport { isNull } from 'lodash';\nimport Layout from '../components/global/Layout';\nimport MainSidebar from '../components/global/MainSidebar';\nimport SectionHeader from '../components/global/SectionHeader';\nimport UserListing from '../components/user/UserListing';\nimport UserForm from '../components/user/UserForm';\nimport { users, resetSingleUser, deleteUser, resetDeleteUser } from '../store/actions/userActions'; // import { allPost } from '../store/actions/userActions';\n\nimport { changeStatus, resetStatus } from '../store/actions/changeStatusActions';\nimport Posts from '../components/Posts/Posts';\n\nconst Users = ({\n  users,\n  data,\n  resetSingleUser,\n  deleteUser,\n  resetDeleteUser,\n  isDeleteSuccess,\n  isDeleteError,\n  isChangeStatusSuccess,\n  isChangeStatusError,\n  changeStatus,\n  resetStatus,\n  isSuccess,\n  location,\n  isRequesting\n}) => {\n  const [allUsers, setAllUsers] = useState(null);\n  const token = localStorage.getItem('token');\n  const [page, setPage] = useState(1);\n  const [count, setCount] = useState(10);\n  const [type, setType] = useState('');\n  const [sortType, setSortType] = useState('createdAt');\n  const [sort, setSort] = useState(false);\n  const [roles, setRoles] = useState(location.state && location.state.role);\n  const [reloadToggle, setReloadToggle] = useState(false);\n  const [searchKeyword, setSearchKeyword] = useState('');\n  const [status, setStatus] = useState(null); // const [currentCount, setCurrentCount] = useState(count);\n\n  console.log(deleteUser, \"pagepage\");\n  useEffect(() => {\n    getAllUser();\n  }, [users, reloadToggle, page, sort, roles, searchKeyword, isDeleteSuccess, location.state, token, type, count, sortType]);\n\n  const getAllUser = () => {\n    if (isNull(location.state && location.state.role)) {\n      users(token, type, page, count, sortType, '', sort ? 'asc' : 'desc', searchKeyword);\n    } else {\n      users(token, type, page, count, sortType, roles, sort ? 'asc' : 'desc', searchKeyword);\n    }\n  };\n\n  useEffect(() => {\n    if (isDeleteSuccess) {\n      swal('User has been deleted!', {\n        buttons: false,\n        timer: 1500\n      });\n    }\n\n    if (isDeleteError) {\n      swal('User has been deleted');\n    }\n\n    resetDeleteUser();\n  }, [isDeleteError, isDeleteSuccess, resetDeleteUser]);\n  useEffect(() => {\n    if (isChangeStatusSuccess) {\n      swal(status === 'active' ? 'User has been activated' : 'User has been deactivated', {\n        buttons: false,\n        timer: 1500\n      });\n      setReloadToggle(!reloadToggle);\n      resetStatus();\n    }\n\n    if (isChangeStatusError) {\n      swal('Something went wrong!', {\n        buttons: false,\n        timer: 1500\n      });\n      resetStatus();\n    }\n  }, [isChangeStatusSuccess, isChangeStatusError, status, reloadToggle, resetStatus]);\n  const [formVisibility, setFormVisibilty] = useState(false);\n  const [isAddForm, setIsAddForm] = useState(false);\n  const [userId, setUserId] = useState(null);\n\n  const handleFormVisibilty = () => {\n    setFormVisibilty(!formVisibility);\n  };\n\n  const handAddFormToggle = bool => {\n    setIsAddForm(bool);\n  };\n\n  const getUserId = id => {\n    setUserId(id);\n  };\n\n  const getSearchKeyword = value => {\n    setSearchKeyword(value);\n  };\n\n  const getStatus = value => {\n    setStatus(value);\n  };\n\n  const toggleSort = value => {\n    setSort(!sort);\n    setSortType(value);\n  };\n\n  const handleTitleChange = () => {\n    if (roles === 'U') {\n      return 'Users';\n    }\n\n    if (roles === 'A') {\n      return 'Admins';\n    }\n\n    if (location.state && location.state.role === null) {\n      return 'All Users';\n    }\n  }; // console.log('roles', location.state && location.state.role);\n\n\n  return /*#__PURE__*/React.createElement(Layout, {\n    title: \"Users\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(MainSidebar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"main-content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"section\", {\n    className: \"section\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(SectionHeader, {\n    title: handleTitleChange(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 11\n    }\n  }), !formVisibility ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(UserListing, {\n    handleFormVisibilty: handleFormVisibilty,\n    users: data && data.data && data.data.users,\n    total: data && data.data && data.data.total,\n    handAddFormToggle: handAddFormToggle,\n    getUserId: getUserId,\n    isRequesting: isRequesting,\n    resetStatus: resetStatus // UserListing={UserListing}\n    ,\n    resetSingleUser: resetSingleUser,\n    deleteUser: deleteUser,\n    sort: sort,\n    setSort: setSort,\n    setPage: setPage,\n    page: page,\n    count: count,\n    getSearchKeyword: getSearchKeyword,\n    changeStatus: changeStatus,\n    getStatus: getStatus,\n    toggleSort: toggleSort,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 15\n    }\n  })) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(UserForm, {\n    handleFormVisibilty: handleFormVisibilty,\n    isAddForm: isAddForm,\n    userId: userId,\n    setReloadToggle: setReloadToggle,\n    reloadToggle: reloadToggle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 13\n    }\n  })))));\n};\n\nconst mapStateToProps = state => (console.log(state, 'state'), {\n  data: state.users.data,\n  isRequesting: state.users.isRequesting,\n  isSuccess: state.users.isSuccess,\n  isError: state.users.isError,\n  isDeleteSuccess: state.deleteUser.isSuccess,\n  isDeleteError: state.deleteUser.isError,\n  isChangeStatusSuccess: state.status.isSuccess,\n  isChangeStatusError: state.status.isError\n});\n\nexport default connect(mapStateToProps, {\n  users,\n  resetSingleUser,\n  deleteUser,\n  resetDeleteUser,\n  changeStatus,\n  resetStatus\n})(withRouter(Users));","map":{"version":3,"sources":["/home/jc-2/Documents/sociality-web/src/pages/Users.js"],"names":["React","useState","useEffect","withRouter","connect","swal","isNull","Layout","MainSidebar","SectionHeader","UserListing","UserForm","users","resetSingleUser","deleteUser","resetDeleteUser","changeStatus","resetStatus","Posts","Users","data","isDeleteSuccess","isDeleteError","isChangeStatusSuccess","isChangeStatusError","isSuccess","location","isRequesting","allUsers","setAllUsers","token","localStorage","getItem","page","setPage","count","setCount","type","setType","sortType","setSortType","sort","setSort","roles","setRoles","state","role","reloadToggle","setReloadToggle","searchKeyword","setSearchKeyword","status","setStatus","console","log","getAllUser","buttons","timer","formVisibility","setFormVisibilty","isAddForm","setIsAddForm","userId","setUserId","handleFormVisibilty","handAddFormToggle","bool","getUserId","id","getSearchKeyword","value","getStatus","toggleSort","handleTitleChange","total","mapStateToProps","isError"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nimport swal from 'sweetalert';\nimport { isNull } from 'lodash';\nimport Layout from '../components/global/Layout';\nimport MainSidebar from '../components/global/MainSidebar';\nimport SectionHeader from '../components/global/SectionHeader';\nimport UserListing from '../components/user/UserListing';\nimport UserForm from '../components/user/UserForm';\n\nimport {\n  users,\n  resetSingleUser,\n  deleteUser,\n  resetDeleteUser\n} from '../store/actions/userActions';\n// import { allPost } from '../store/actions/userActions';\n\nimport {\n  changeStatus,\n  resetStatus\n} from '../store/actions/changeStatusActions';\nimport Posts from '../components/Posts/Posts';\n\nconst Users = ({\n  users,\n  data,\n  resetSingleUser,\n  deleteUser,\n  resetDeleteUser,\n  isDeleteSuccess,\n  isDeleteError,\n  isChangeStatusSuccess,\n  isChangeStatusError,\n  changeStatus,\n  resetStatus,\n  isSuccess,\n  location,\n  isRequesting\n}) => {\n  const [allUsers, setAllUsers] = useState(null);\n  const token = localStorage.getItem('token');\n  const [page, setPage] = useState(1);\n  const [count, setCount] = useState(10);\n  const [type, setType] = useState('');\n  const [sortType, setSortType] = useState('createdAt');\n  const [sort, setSort] = useState(false);\n  const [roles, setRoles] = useState(location.state && location.state.role);\n  const [reloadToggle, setReloadToggle] = useState(false);\n  const [searchKeyword, setSearchKeyword] = useState('');\n  const [status, setStatus] = useState(null);\n  // const [currentCount, setCurrentCount] = useState(count);\n  console.log(deleteUser, \"pagepage\");\n\n  useEffect(() => {\n    getAllUser()\n  }, [\n    users,\n    reloadToggle,\n    page,\n    sort,\n    roles,\n    searchKeyword,\n    isDeleteSuccess,\n    location.state,\n    token,\n    type,\n    count,\n    sortType\n  ]);\n\n  const getAllUser=()=>{\n    if (isNull(location.state && location.state.role)) {\n      users(\n        token,\n        type,\n        page,\n        count,\n        sortType,\n        '',\n        sort ? 'asc' : 'desc',\n        searchKeyword\n      );\n    } else {\n      users(\n        token,\n        type,\n        page,\n        count,\n        sortType,\n        roles,\n        sort ? 'asc' : 'desc',\n        searchKeyword\n      );\n    }\n  }\n\n  useEffect(() => {\n    if (isDeleteSuccess) {\n      swal('User has been deleted!', {\n        buttons: false,\n        timer: 1500\n      });\n    }\n\n    if (isDeleteError) {\n      swal('User has been deleted');\n    }\n    resetDeleteUser();\n  }, [isDeleteError, isDeleteSuccess, resetDeleteUser]);\n\n  useEffect(() => {\n    if (isChangeStatusSuccess) {\n      swal(\n        status === 'active'\n          ? 'User has been activated'\n          : 'User has been deactivated',\n        {\n          buttons: false,\n          timer: 1500\n        }\n      );\n      setReloadToggle(!reloadToggle);\n      resetStatus();\n    }\n\n    if (isChangeStatusError) {\n      swal('Something went wrong!', {\n        buttons: false,\n        timer: 1500\n      });\n      resetStatus();\n    }\n  }, [\n    isChangeStatusSuccess,\n    isChangeStatusError,\n    status,\n    reloadToggle,\n    resetStatus\n  ]);\n\n  const [formVisibility, setFormVisibilty] = useState(false);\n  const [isAddForm, setIsAddForm] = useState(false);\n  const [userId, setUserId] = useState(null);\n\n  const handleFormVisibilty = () => {\n    setFormVisibilty(!formVisibility);\n  };\n\n  const handAddFormToggle = bool => {\n    setIsAddForm(bool);\n  };\n\n  const getUserId = id => {\n    setUserId(id);\n  };\n\n  const getSearchKeyword = value => {\n    setSearchKeyword(value);\n  };\n\n  const getStatus = value => {\n    setStatus(value);\n  };\n\n  const toggleSort = value => {\n    setSort(!sort);\n    setSortType(value);\n  };\n\n  const handleTitleChange = () => {\n    if (roles === 'U') {\n      return 'Users';\n    }\n    if (roles === 'A') {\n      return 'Admins';\n    }\n    if (location.state && location.state.role === null) {\n      return 'All Users';\n    }\n  };\n\n  // console.log('roles', location.state && location.state.role);\n  return (\n    <Layout title=\"Users\">\n      <MainSidebar />\n      <div className=\"main-content\">\n\n        <section className=\"section\">\n          <SectionHeader title={handleTitleChange()} />\n          {!formVisibility ? (\n            <>\n              <UserListing\n                handleFormVisibilty={handleFormVisibilty}\n                users={data && data.data && data.data.users}\n                total={data && data.data && data.data.total}\n                handAddFormToggle={handAddFormToggle}\n                getUserId={getUserId}\n                isRequesting={isRequesting}\n                resetStatus={resetStatus}\n                // UserListing={UserListing}\n                resetSingleUser={resetSingleUser}\n                deleteUser={deleteUser}\n                sort={sort}\n                setSort={setSort}\n                setPage={setPage}\n                page={page}\n                count={count}\n                getSearchKeyword={getSearchKeyword}\n                changeStatus={changeStatus}\n                getStatus={getStatus}\n                toggleSort={toggleSort}\n              />\n              \n            </>\n          ) : (\n            <>\n          \n            <UserForm\n              handleFormVisibilty={handleFormVisibilty}\n              isAddForm={isAddForm}\n              userId={userId}\n              setReloadToggle={setReloadToggle}\n              reloadToggle={reloadToggle}\n            />\n            </>\n          )}\n        </section>\n      </div>\n    </Layout>\n  );\n};\n\nconst mapStateToProps = state => (\n  console.log(state, 'state'),\n  \n  {\n  data: state.users.data,\n  isRequesting: state.users.isRequesting,\n  isSuccess: state.users.isSuccess,\n  isError: state.users.isError,\n  isDeleteSuccess: state.deleteUser.isSuccess,\n  isDeleteError: state.deleteUser.isError,\n  isChangeStatusSuccess: state.status.isSuccess,\n  isChangeStatusError: state.status.isError\n});\n\nexport default connect(mapStateToProps, {\n  users,\n  resetSingleUser,\n  deleteUser,\n  resetDeleteUser,\n  changeStatus,\n  resetStatus\n})(withRouter(Users));\n"]},"metadata":{},"sourceType":"module"}