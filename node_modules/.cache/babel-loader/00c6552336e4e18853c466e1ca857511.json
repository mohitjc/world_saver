{"ast":null,"code":"var _jsxFileName = \"/home/user/Documents/socialify/sociality-web/src/pages/Advertise.js\";\nimport React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport swal from 'sweetalert';\nimport Layout from '../components/global/Layout';\nimport MainSidebar from '../components/global/MainSidebar';\nimport SectionHeader from '../components/global/SectionHeader';\nimport Listing from '../components/advertisement/Listing';\nimport Form from '../components/advertisement/Form';\nimport { items, resetSingle, Delete, resetDelete } from '../store/actions/advertiseActions';\nimport { types } from '../store/actions/typeActions';\nimport { changeStatus, resetStatus } from '../store/actions/changeStatusActions';\n\nconst Advertise = ({\n  items,\n  data,\n  resetSingle,\n  Delete,\n  resetDelete,\n  isDeleteSuccess,\n  isDeleteError,\n  changeStatus,\n  resetStatus,\n  isChangeStatusSuccess,\n  isChangeStatusError,\n  isSuccess,\n  isRequesting,\n  allTypes,\n  types\n}) => {\n  const token = localStorage.getItem('token');\n  const [page, setPage] = useState(1);\n  const [count, setCount] = useState(10);\n  const [type, setType] = useState('I');\n  const [sort, setSort] = useState(false);\n  const [sortType, setSortType] = useState('createdAt');\n  const [reloadToggle, setReloadToggle] = useState(false);\n  const [searchKeyword, setSearchKeyword] = useState('');\n  const [status, setStatus] = useState(null); // const [currentCount, setCurrentCount] = useState(count);\n\n  useEffect(() => {\n    items(token, type, page, count, sortType, sort ? 'asc' : 'desc', searchKeyword);\n  }, [items, reloadToggle, page, sort, searchKeyword, isDeleteSuccess, token, type, count, sortType]);\n  useEffect(() => {\n    if (isDeleteSuccess) {\n      swal('Advertise has been deleted!', {\n        buttons: false,\n        timer: 1500\n      });\n    }\n\n    if (isDeleteError) {\n      swal('Something went wrong!', {\n        buttons: false,\n        timer: 1500\n      });\n    }\n\n    resetDelete();\n  }, [isDeleteSuccess, isDeleteError, resetDelete]);\n  useEffect(() => {\n    if (isChangeStatusSuccess) {\n      swal(status === 'active' ? 'Advertise has been activated' : 'Advertise has been deactivated', {\n        buttons: false,\n        timer: 1500\n      });\n      setReloadToggle(!reloadToggle);\n      resetStatus();\n    }\n\n    if (isChangeStatusError) {\n      swal('Something went wrong!', {\n        buttons: false,\n        timer: 1500\n      });\n      resetStatus();\n    }\n  }, [isChangeStatusSuccess, isChangeStatusError, status, reloadToggle, resetStatus]);\n  useEffect(() => {\n    types(token);\n  }, [token, types]);\n  const [formVisibility, setFormVisibilty] = useState(false);\n  const [isAddForm, setIsAddForm] = useState(false);\n  const [Id, setId] = useState(null);\n\n  const handleFormVisibilty = () => {\n    setFormVisibilty(!formVisibility);\n  };\n\n  const handAddFormToggle = bool => {\n    setIsAddForm(bool);\n  };\n\n  const getId = id => {\n    setId(id);\n  };\n\n  const getSearchKeyword = value => {\n    setSearchKeyword(value);\n  };\n\n  const getStatus = value => {\n    setStatus(value);\n  };\n\n  const toggleSort = value => {\n    setSortType(value);\n    setSort(!sort);\n  };\n\n  return /*#__PURE__*/React.createElement(Layout, {\n    title: \"Advertise\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(MainSidebar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"main-content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"section\", {\n    className: \"section\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(SectionHeader, {\n    title: \"Advertise\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 11\n    }\n  }), !formVisibility ? /*#__PURE__*/React.createElement(Listing, {\n    handleFormVisibilty: handleFormVisibilty,\n    items: data && data.data,\n    total: data && data.total,\n    handAddFormToggle: handAddFormToggle,\n    getId: getId,\n    isRequesting: isRequesting // UserListing={UserListing}\n    ,\n    resetSingle: resetSingle,\n    deleteItem: Delete,\n    sort: sort,\n    setSort: setSort,\n    setPage: setPage,\n    page: page,\n    count: count,\n    getSearchKeyword: getSearchKeyword,\n    changeStatus: changeStatus,\n    getStatus: getStatus,\n    toggleSort: toggleSort,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 13\n    }\n  }) : /*#__PURE__*/React.createElement(Form, {\n    allTypes: allTypes,\n    items: data && data.data && data.data.category,\n    handleFormVisibilty: handleFormVisibilty,\n    isAddForm: isAddForm,\n    Id: Id,\n    setReloadToggle: setReloadToggle,\n    reloadToggle: reloadToggle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 13\n    }\n  }))));\n};\n\nconst mapStateToProps = state => ({\n  data: state.advertises.data,\n  isRequesting: state.advertises.isRequesting,\n  isSuccess: state.advertises.isSuccess,\n  isError: state.advertises.isError,\n  isDeleteSuccess: state.deleteAdvertise.isSuccess,\n  isDeleteError: state.deleteAdvertise.isError,\n  isChangeStatusSuccess: state.status.isSuccess,\n  isChangeStatusError: state.status.isError,\n  allTypes: state.types.data\n});\n\nexport default connect(mapStateToProps, {\n  items,\n  resetSingle,\n  Delete,\n  resetDelete,\n  changeStatus,\n  resetStatus,\n  types\n})(Advertise);","map":{"version":3,"sources":["/home/user/Documents/socialify/sociality-web/src/pages/Advertise.js"],"names":["React","useState","useEffect","connect","swal","Layout","MainSidebar","SectionHeader","Listing","Form","items","resetSingle","Delete","resetDelete","types","changeStatus","resetStatus","Advertise","data","isDeleteSuccess","isDeleteError","isChangeStatusSuccess","isChangeStatusError","isSuccess","isRequesting","allTypes","token","localStorage","getItem","page","setPage","count","setCount","type","setType","sort","setSort","sortType","setSortType","reloadToggle","setReloadToggle","searchKeyword","setSearchKeyword","status","setStatus","buttons","timer","formVisibility","setFormVisibilty","isAddForm","setIsAddForm","Id","setId","handleFormVisibilty","handAddFormToggle","bool","getId","id","getSearchKeyword","value","getStatus","toggleSort","total","category","mapStateToProps","state","advertises","isError","deleteAdvertise"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\n\nimport swal from 'sweetalert';\nimport Layout from '../components/global/Layout';\nimport MainSidebar from '../components/global/MainSidebar';\nimport SectionHeader from '../components/global/SectionHeader';\nimport Listing from '../components/advertisement/Listing';\nimport Form from '../components/advertisement/Form';\nimport {\n  items,\n  resetSingle,\n  Delete,\n  resetDelete\n} from '../store/actions/advertiseActions';\nimport { types } from '../store/actions/typeActions';\n\nimport {\n  changeStatus,\n  resetStatus\n} from '../store/actions/changeStatusActions';\n\nconst Advertise = ({\n  items,\n  data,\n  resetSingle,\n  Delete,\n  resetDelete,\n  isDeleteSuccess,\n  isDeleteError,\n  changeStatus,\n  resetStatus,\n  isChangeStatusSuccess,\n  isChangeStatusError,\n  isSuccess,\n  isRequesting,\n  allTypes,\n  types\n}) => {\n  const token = localStorage.getItem('token');\n  const [page, setPage] = useState(1);\n  const [count, setCount] = useState(10);\n  const [type, setType] = useState('I');\n  const [sort, setSort] = useState(false);\n  const [sortType, setSortType] = useState('createdAt');\n  const [reloadToggle, setReloadToggle] = useState(false);\n  const [searchKeyword, setSearchKeyword] = useState('');\n  const [status, setStatus] = useState(null);\n\n  // const [currentCount, setCurrentCount] = useState(count);\n\n  useEffect(() => {\n    items(\n      token,\n      type,\n      page,\n      count,\n      sortType,\n      sort ? 'asc' : 'desc',\n      searchKeyword\n    );\n  }, [\n    items,\n    reloadToggle,\n    page,\n    sort,\n    searchKeyword,\n    isDeleteSuccess,\n    token,\n    type,\n    count,\n    sortType\n  ]);\n\n  useEffect(() => {\n    if (isDeleteSuccess) {\n      swal('Advertise has been deleted!', {\n        buttons: false,\n        timer: 1500\n      });\n    }\n\n    if (isDeleteError) {\n      swal('Something went wrong!', {\n        buttons: false,\n        timer: 1500\n      });\n    }\n    resetDelete();\n  }, [isDeleteSuccess, isDeleteError, resetDelete]);\n\n  useEffect(() => {\n    if (isChangeStatusSuccess) {\n      swal(\n        status === 'active'\n          ? 'Advertise has been activated'\n          : 'Advertise has been deactivated',\n        {\n          buttons: false,\n          timer: 1500\n        }\n      );\n      setReloadToggle(!reloadToggle);\n      resetStatus();\n    }\n\n    if (isChangeStatusError) {\n      swal('Something went wrong!', {\n        buttons: false,\n        timer: 1500\n      });\n      resetStatus();\n    }\n  }, [\n    isChangeStatusSuccess,\n    isChangeStatusError,\n    status,\n    reloadToggle,\n    resetStatus\n  ]);\n\n  useEffect(() => {\n    types(token);\n  }, [token, types]);\n\n  const [formVisibility, setFormVisibilty] = useState(false);\n  const [isAddForm, setIsAddForm] = useState(false);\n  const [Id, setId] = useState(null);\n\n  const handleFormVisibilty = () => {\n    setFormVisibilty(!formVisibility);\n  };\n\n  const handAddFormToggle = bool => {\n    setIsAddForm(bool);\n  };\n\n  const getId = id => {\n    setId(id);\n  };\n\n  const getSearchKeyword = value => {\n    setSearchKeyword(value);\n  };\n\n  const getStatus = value => {\n    setStatus(value);\n  };\n\n  const toggleSort = value => {\n    setSortType(value);\n    setSort(!sort);\n  };\n\n\n  return (\n    <Layout title=\"Advertise\">\n      <MainSidebar />\n      <div className=\"main-content\">\n        <section className=\"section\">\n          <SectionHeader title=\"Advertise\" />\n          {!formVisibility ? (\n            <Listing\n              handleFormVisibilty={handleFormVisibilty}\n              items={data && data.data}\n              total={data && data.total}\n              handAddFormToggle={handAddFormToggle}\n              getId={getId}\n              isRequesting={isRequesting}\n              // UserListing={UserListing}\n              resetSingle={resetSingle}\n              deleteItem={Delete}\n              sort={sort}\n              setSort={setSort}\n              setPage={setPage}\n              page={page}\n              count={count}\n              getSearchKeyword={getSearchKeyword}\n              changeStatus={changeStatus}\n              getStatus={getStatus}\n              toggleSort={toggleSort}\n            />\n          ) : (\n            <Form\n              allTypes={allTypes}\n              items={data && data.data && data.data.category}\n              handleFormVisibilty={handleFormVisibilty}\n              isAddForm={isAddForm}\n              Id={Id}\n              setReloadToggle={setReloadToggle}\n              reloadToggle={reloadToggle}\n            />\n          )}\n        </section>\n      </div>\n    </Layout>\n  );\n};\n\nconst mapStateToProps = state => ({\n  data: state.advertises.data,\n  isRequesting: state.advertises.isRequesting,\n  isSuccess: state.advertises.isSuccess,\n  isError: state.advertises.isError,\n  isDeleteSuccess: state.deleteAdvertise.isSuccess,\n  isDeleteError: state.deleteAdvertise.isError,\n  isChangeStatusSuccess: state.status.isSuccess,\n  isChangeStatusError: state.status.isError,\n  allTypes: state.types.data\n});\n\nexport default connect(mapStateToProps, {\n  items,\n  resetSingle,\n  Delete,\n  resetDelete,\n  changeStatus,\n  resetStatus,\n  types\n})(Advertise);\n"]},"metadata":{},"sourceType":"module"}