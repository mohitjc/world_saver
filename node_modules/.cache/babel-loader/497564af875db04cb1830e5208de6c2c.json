{"ast":null,"code":"var _jsxFileName = \"/home/user/Documents/socialify/sociality-web/src/components/questions/QuestionsForm.js\";\nimport React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { withFormik } from 'formik';\nimport Yup, { object as yupObject, string as yupString, number as yupNumber } from 'yup';\nimport swal from 'sweetalert';\nimport { withRouter } from 'react-router-dom';\nimport { isNull } from 'lodash';\nimport { questionsAdd, questionsUpdate, singleQuestion, resetAddQuestion, resetUpdateQuestion, questions } from '../../store/actions/questionsActions';\n\nconst QuestionsForm = ({\n  handleFormVisibilty,\n  handleSubmit,\n  handleBlur,\n  handleChange,\n  values,\n  isRequesting,\n  isUpdateRequesting,\n  isSuccess,\n  isUpdateSuccess,\n  isError,\n  errors,\n  touched,\n  questions,\n  data,\n  isAddForm,\n  reloadToggle,\n  setReloadToggle,\n  questionId,\n  singleQuestion,\n  singleQuestionData,\n  resetAddQuestion,\n  resetUpdateQuestion\n}) => {\n  const token = localStorage.getItem('token');\n  useEffect(() => {\n    if (isSuccess) {\n      swal('New question added!', '', 'success');\n      handleFormVisibilty();\n      resetAddQuestion();\n      setReloadToggle(!reloadToggle);\n    }\n\n    if (isError) {\n      swal(data && data.data && data.data.message, '', 'warning'); // handleFormVisibilty();\n\n      resetUpdateQuestion(); // setReloadToggle(!reloadToggle);\n    }\n\n    if (isUpdateSuccess) {\n      swal('Question updated!', '', 'success');\n      handleFormVisibilty();\n      resetUpdateQuestion();\n      setReloadToggle(!reloadToggle);\n    }\n  }, [isSuccess, isError, isUpdateSuccess]);\n  useEffect(() => {\n    if (!isAddForm) {\n      singleQuestion(questionId, token); // swal('New user added!', '', 'success');\n    }\n  }, [singleQuestion]); // console.log('data', data);\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn btn-primary mb-3\",\n    onClick: handleFormVisibilty,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }\n  }, \"View Questions\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"card\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    className: \"needs-validation\",\n    noValidate: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"card-header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }\n  }, isAddForm ? 'Add' : 'Edit', \" questions\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"card-body\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-group col-md-4 col-12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 17\n    }\n  }, \"Name\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    name: \"question\",\n    className: \"form-control\" // value=\"john\"\n    ,\n    value: values.question,\n    onBlur: handleBlur,\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 17\n    }\n  }), errors.question && touched.question && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"invalid-feedback\",\n    style: {\n      display: 'block'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 19\n    }\n  }, errors.question)))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"card-footer d-flex justify-content-between\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    className: \"btn btn-danger\",\n    onClick: handleFormVisibilty,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 13\n    }\n  }, \"Cancel\"), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    className: `btn btn-primary   ${isRequesting || isUpdateRequesting ? 'btn-progress disabled' : ''}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 13\n    }\n  }, \"Save Changes\")))));\n};\n\nconst QuestionsFormFormik = withFormik({\n  enableReinitialize: true,\n  mapPropsToValues: ({\n    singleQuestionData\n  }) => {\n    // console.log('singleQuestionData', singleQuestionData);\n    return {\n      question: singleQuestionData && singleQuestionData.ques.question || '',\n      type: singleQuestionData && singleQuestionData.ques.type || ''\n    };\n  },\n  validationSchema: yupObject().shape({\n    question: yupString().max(50).required()\n  }),\n  handleSubmit: async (values, {\n    props,\n    setSubmitting,\n    resetForm\n  }) => {\n    // const { router } = props;\n    const token = localStorage.getItem('token'); // console.log('state values', values);\n\n    if (props.isAddForm) {\n      props.questionsAdd({\n        question: values.question,\n        type: 'common'\n      }, token);\n    } else {\n      props.questionsUpdate({\n        question: values.question,\n        type: values.type\n      }, props.questionId, token);\n    } // resetForm();\n\n  },\n  displayName: 'QuestionForm' // helps with React DevTools\n\n})(QuestionsForm);\n\nconst mapStateToProps = state => ({\n  data: state.questionAdd.data,\n  isRequesting: state.questionAdd.isRequesting,\n  isUpdateRequesting: state.questionUpdate.isRequesting,\n  isSuccess: state.questionAdd.isSuccess,\n  isUpdateSuccess: state.questionUpdate.isSuccess,\n  isError: state.questionAdd.isError,\n  singleQuestionData: state.question.data\n});\n\nexport default connect(mapStateToProps, {\n  questionsAdd,\n  questionsUpdate,\n  singleQuestion,\n  resetAddQuestion,\n  resetUpdateQuestion,\n  questions\n})(QuestionsFormFormik);","map":{"version":3,"sources":["/home/user/Documents/socialify/sociality-web/src/components/questions/QuestionsForm.js"],"names":["React","useEffect","useState","connect","withFormik","Yup","object","yupObject","string","yupString","number","yupNumber","swal","withRouter","isNull","questionsAdd","questionsUpdate","singleQuestion","resetAddQuestion","resetUpdateQuestion","questions","QuestionsForm","handleFormVisibilty","handleSubmit","handleBlur","handleChange","values","isRequesting","isUpdateRequesting","isSuccess","isUpdateSuccess","isError","errors","touched","data","isAddForm","reloadToggle","setReloadToggle","questionId","singleQuestionData","token","localStorage","getItem","message","question","display","QuestionsFormFormik","enableReinitialize","mapPropsToValues","ques","type","validationSchema","shape","max","required","props","setSubmitting","resetForm","displayName","mapStateToProps","state","questionAdd","questionUpdate"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { withFormik } from 'formik';\nimport Yup, {\n  object as yupObject,\n  string as yupString,\n  number as yupNumber\n} from 'yup';\nimport swal from 'sweetalert';\nimport { withRouter } from 'react-router-dom';\n\nimport { isNull } from 'lodash';\nimport {\n  questionsAdd,\n  questionsUpdate,\n  singleQuestion,\n  resetAddQuestion,\n  resetUpdateQuestion,\n  questions\n} from '../../store/actions/questionsActions';\n\nconst QuestionsForm = ({\n  handleFormVisibilty,\n  handleSubmit,\n  handleBlur,\n  handleChange,\n  values,\n  isRequesting,\n  isUpdateRequesting,\n  isSuccess,\n  isUpdateSuccess,\n  isError,\n  errors,\n  touched,\n  questions,\n  data,\n  isAddForm,\n  reloadToggle,\n  setReloadToggle,\n  questionId,\n  singleQuestion,\n  singleQuestionData,\n  resetAddQuestion,\n  resetUpdateQuestion\n}) => {\n  const token = localStorage.getItem('token');\n  useEffect(() => {\n    if (isSuccess) {\n      swal('New question added!', '', 'success');\n      handleFormVisibilty();\n      resetAddQuestion();\n      setReloadToggle(!reloadToggle);\n    }\n    if (isError) {\n      swal(data && data.data && data.data.message, '', 'warning');\n      // handleFormVisibilty();\n      resetUpdateQuestion();\n      // setReloadToggle(!reloadToggle);\n    }\n    if (isUpdateSuccess) {\n      swal('Question updated!', '', 'success');\n      handleFormVisibilty();\n      resetUpdateQuestion();\n      setReloadToggle(!reloadToggle);\n    }\n  }, [isSuccess, isError, isUpdateSuccess]);\n\n  useEffect(() => {\n    if (!isAddForm) {\n      singleQuestion(questionId, token);\n      // swal('New user added!', '', 'success');\n    }\n  }, [singleQuestion]);\n\n  // console.log('data', data);\n\n  return (\n    <div className=\"\">\n      <button className=\"btn btn-primary mb-3\" onClick={handleFormVisibilty}>\n        View Questions\n      </button>\n      <div className=\"card\">\n        <form\n          onSubmit={handleSubmit}\n          className=\"needs-validation\"\n          noValidate=\"\"\n        >\n          <div className=\"card-header\">\n            <h4>{isAddForm ? 'Add' : 'Edit'} questions</h4>\n          </div>\n          <div className=\"card-body\">\n            <div className=\"row\">\n              <div className=\"form-group col-md-4 col-12\">\n                <label>Name</label>\n                <input\n                  type=\"text\"\n                  name=\"question\"\n                  className=\"form-control\"\n                  // value=\"john\"\n\n                  value={values.question}\n                  onBlur={handleBlur}\n                  onChange={handleChange}\n                />\n                {errors.question && touched.question && (\n                  <div\n                    className=\"invalid-feedback\"\n                    style={{ display: 'block' }}\n                  >\n                    {errors.question}\n                  </div>\n                )}\n              </div>\n            </div>\n\n            {/* <div className=\"row\">\n              <div className=\"form-group col-12\">\n                <label>Bio</label>\n                <textarea className=\"form-control summernote-simple\">\n                  asdkahjs\n                </textarea>\n              </div>\n            </div> */}\n            {/* <div className=\"row\">\n              <div className=\"form-group mb-0 col-12\">\n                <div className=\"custom-control custom-checkbox\">\n                  <input\n                    type=\"checkbox\"\n                    name=\"remember\"\n                    className=\"custom-control-input\"\n                    id=\"newsletter\"\n                  />\n                  <label className=\"custom-control-label\" htmlFor=\"newsletter\">\n                    Subscribe to newsletter\n                  </label>\n                  <div className=\"text-muted form-text\">\n                    You will get new information about products, offers and\n                    promotions\n                  </div>\n                </div>\n              </div>\n            </div> */}\n          </div>\n          <div className=\"card-footer d-flex justify-content-between\">\n            <button\n              type=\"button\"\n              className=\"btn btn-danger\"\n              onClick={handleFormVisibilty}\n            >\n              Cancel\n            </button>\n            <button\n              type=\"submit\"\n              className={`btn btn-primary   ${\n                isRequesting || isUpdateRequesting\n                  ? 'btn-progress disabled'\n                  : ''\n              }`}\n            >\n              Save Changes\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nconst QuestionsFormFormik = withFormik({\n  enableReinitialize: true,\n  mapPropsToValues: ({ singleQuestionData }) => {\n    // console.log('singleQuestionData', singleQuestionData);\n    return {\n      question: (singleQuestionData && singleQuestionData.ques.question) || '',\n      type: (singleQuestionData && singleQuestionData.ques.type) || ''\n    };\n  },\n\n  validationSchema: yupObject().shape({\n    question: yupString()\n      .max(50)\n      .required()\n  }),\n  handleSubmit: async (values, { props, setSubmitting, resetForm }) => {\n    // const { router } = props;\n    const token = localStorage.getItem('token');\n    // console.log('state values', values);\n    if (props.isAddForm) {\n      props.questionsAdd(\n        {\n          question: values.question,\n          type: 'common'\n        },\n        token\n      );\n    } else {\n      props.questionsUpdate(\n        {\n          question: values.question,\n          type: values.type\n        },\n        props.questionId,\n        token\n      );\n    }\n\n    // resetForm();\n  },\n\n  displayName: 'QuestionForm' // helps with React DevTools\n})(QuestionsForm);\n\nconst mapStateToProps = state => ({\n  data: state.questionAdd.data,\n  isRequesting: state.questionAdd.isRequesting,\n  isUpdateRequesting: state.questionUpdate.isRequesting,\n  isSuccess: state.questionAdd.isSuccess,\n  isUpdateSuccess: state.questionUpdate.isSuccess,\n  isError: state.questionAdd.isError,\n  singleQuestionData: state.question.data\n});\n\nexport default connect(\n  mapStateToProps,\n  {\n    questionsAdd,\n    questionsUpdate,\n    singleQuestion,\n    resetAddQuestion,\n    resetUpdateQuestion,\n    questions\n  }\n)(QuestionsFormFormik);\n"]},"metadata":{},"sourceType":"module"}