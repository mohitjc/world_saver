{"ast":null,"code":"var _jsxFileName = \"/home/user/Documents/socialify/sociality-web/src/pages/Articles.js\";\nimport React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport swal from 'sweetalert';\nimport Layout from '../components/global/Layout';\nimport MainSidebar from '../components/global/MainSidebar';\nimport SectionHeader from '../components/global/SectionHeader';\nimport { blogs, resetSingleBlog, deleteBlog, resetDeleteBlog } from '../store/actions/blogsActions';\nimport { changeStatus, resetStatus } from '../store/actions/changeStatusActions';\nimport { getCatByType } from '../store/actions/categoryActions';\nimport ArticleLsiting from '../components/articles/ArticleListing';\nimport ArticleForm from '../components/articles/ArticleForm';\nimport ApiClient from '../components/apiClient';\nimport load from '../methods/load';\nimport { categories } from '../store/actions/categoryActions';\n\nconst Articles = ({\n  data,\n  categorData,\n  categories,\n  blogs,\n  resetSingleBlog,\n  deleteBlog,\n  resetDeleteBlog,\n  isDeleteSuccess,\n  isChangeStatusSuccess,\n  isChangeStatusError,\n  isDeleteError,\n  changeStatus,\n  resetStatus,\n  getCatByType,\n  isRequesting,\n  catByTypeData\n}) => {\n  const token = localStorage.getItem('token');\n  const [page, setPage] = useState(1);\n  const [count, setCount] = useState(10);\n  const [type, setType] = useState('I');\n  const [sort, setSort] = useState(false);\n  const [sortType, setSortType] = useState('createdAt');\n  const [reloadToggle, setReloadToggle] = useState(false);\n  const [searchKeyword, setSearchKeyword] = useState('');\n  const [status, setStatus] = useState(null);\n  useEffect(() => {\n    blogs(token, type, page, count, sortType, sort ? 'asc' : 'desc', searchKeyword);\n  }, [blogs, reloadToggle, page, sort, searchKeyword, isDeleteSuccess, token, type, count, sortType]);\n  useEffect(() => {\n    if (isDeleteSuccess) {\n      swal('Blog has been deleted!', {\n        buttons: false,\n        timer: 1500\n      });\n      resetDeleteBlog();\n    }\n\n    if (isDeleteError) {\n      swal('Something went wrong!', {\n        buttons: false,\n        timer: 1500\n      });\n      resetDeleteBlog();\n    }\n  }, [isDeleteSuccess, isDeleteError, resetDeleteBlog]);\n  useEffect(() => {\n    if (isChangeStatusSuccess) {\n      swal(status === 'active' ? 'Blog has been activated' : 'Blog has been deactivated', {\n        buttons: false,\n        timer: 1500\n      });\n      setReloadToggle(!reloadToggle);\n      resetStatus();\n    }\n\n    if (isChangeStatusError) {\n      swal('Something went wrong!', {\n        buttons: false,\n        timer: 1500\n      });\n      resetStatus();\n    }\n  }, [isChangeStatusSuccess, isChangeStatusError, status, reloadToggle, resetStatus]);\n  useEffect(() => {\n    getCategory();\n  });\n\n  const getCategory = () => {\n    let prm = {\n      page: 1,\n      count: 10,\n      type: 'I',\n      sortBy: 'createdAt desc'\n    }; // categories(\n    //   token,\n    //   'I',\n    //   1,\n    //   1000,\n    //   '',\n    //   '',\n    //   ''\n    // );\n  };\n\n  const [formVisibility, setFormVisibilty] = useState(false);\n  const [isAddForm, setIsAddForm] = useState(false);\n  const [blogId, setBlogId] = useState(null);\n\n  const handleFormVisibilty = () => {\n    setFormVisibilty(!formVisibility);\n  };\n\n  const handAddFormToggle = bool => {\n    setIsAddForm(bool);\n  };\n\n  const getBlogId = id => {\n    setBlogId(id);\n  };\n\n  const getSearchKeyword = value => {\n    setSearchKeyword(value);\n  };\n\n  const getStatus = value => {\n    setStatus(value);\n  };\n\n  const toggleSort = value => {\n    setSort(!sort);\n    setSortType(value);\n  }; // console.log('isDeleteError', isDeleteError);\n\n\n  return /*#__PURE__*/React.createElement(Layout, {\n    title: \"Articles\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(MainSidebar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"main-content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"section\", {\n    className: \"section\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(SectionHeader, {\n    title: \"Articles\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 11\n    }\n  }), !formVisibility ? /*#__PURE__*/React.createElement(ArticleLsiting, {\n    handleFormVisibilty: handleFormVisibilty,\n    blogs: data && data.data && data.data,\n    total: data && data.data && data.data.total,\n    handAddFormToggle: handAddFormToggle,\n    getBlogId: getBlogId,\n    resetSingleBlog: resetSingleBlog,\n    deleteBlog: deleteBlog,\n    sort: sort,\n    setSort: setSort,\n    setPage: setPage,\n    isRequesting: isRequesting,\n    page: page,\n    count: count,\n    getSearchKeyword: getSearchKeyword,\n    changeStatus: changeStatus,\n    getStatus: getStatus,\n    toggleSort: toggleSort,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 13\n    }\n  }) : /*#__PURE__*/React.createElement(ArticleForm, {\n    catByTypeData: catByTypeData,\n    handleFormVisibilty: handleFormVisibilty,\n    isAddForm: isAddForm,\n    categories: categorData,\n    blogId: blogId,\n    setReloadToggle: setReloadToggle,\n    reloadToggle: reloadToggle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 13\n    }\n  }))));\n};\n\nconst mapStateToProps = state => ({\n  data: state.blogs.data,\n  categorData: state.categories.data,\n  isRequesting: state.blogs.isRequesting,\n  isSuccess: state.blogs.isSuccess,\n  isError: state.blogs.isError,\n  isDeleteSuccess: state.deleteBlog.isSuccess,\n  isDeleteError: state.deleteBlog.isError,\n  isChangeStatusSuccess: state.status.isSuccess,\n  isChangeStatusError: state.status.isError,\n  catByTypeData: state.catByType.data\n});\n\nexport default connect(mapStateToProps, {\n  blogs,\n  resetSingleBlog,\n  deleteBlog,\n  categories,\n  resetDeleteBlog,\n  changeStatus,\n  resetStatus,\n  getCatByType\n})(Articles);","map":{"version":3,"sources":["/home/user/Documents/socialify/sociality-web/src/pages/Articles.js"],"names":["React","useState","useEffect","connect","swal","Layout","MainSidebar","SectionHeader","blogs","resetSingleBlog","deleteBlog","resetDeleteBlog","changeStatus","resetStatus","getCatByType","ArticleLsiting","ArticleForm","ApiClient","load","categories","Articles","data","categorData","isDeleteSuccess","isChangeStatusSuccess","isChangeStatusError","isDeleteError","isRequesting","catByTypeData","token","localStorage","getItem","page","setPage","count","setCount","type","setType","sort","setSort","sortType","setSortType","reloadToggle","setReloadToggle","searchKeyword","setSearchKeyword","status","setStatus","buttons","timer","getCategory","prm","sortBy","formVisibility","setFormVisibilty","isAddForm","setIsAddForm","blogId","setBlogId","handleFormVisibilty","handAddFormToggle","bool","getBlogId","id","getSearchKeyword","value","getStatus","toggleSort","total","mapStateToProps","state","isSuccess","isError","catByType"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\n\nimport swal from 'sweetalert';\nimport Layout from '../components/global/Layout';\nimport MainSidebar from '../components/global/MainSidebar';\nimport SectionHeader from '../components/global/SectionHeader';\nimport {\n  blogs,\n  resetSingleBlog,\n  deleteBlog,\n  resetDeleteBlog\n} from '../store/actions/blogsActions';\nimport {\n  changeStatus,\n  resetStatus\n} from '../store/actions/changeStatusActions';\nimport { getCatByType } from '../store/actions/categoryActions';\nimport ArticleLsiting from '../components/articles/ArticleListing';\nimport ArticleForm from '../components/articles/ArticleForm';\nimport ApiClient from '../components/apiClient';\nimport load from '../methods/load';\n\nimport {\n  categories,\n} from '../store/actions/categoryActions';\n\nconst Articles = ({\n  data,\n  categorData,\n  categories,\n  blogs,\n  resetSingleBlog,\n  deleteBlog,\n  resetDeleteBlog,\n  isDeleteSuccess,\n  isChangeStatusSuccess,\n  isChangeStatusError,\n  isDeleteError,\n  changeStatus,\n  resetStatus,\n  getCatByType,\n  isRequesting,\n  catByTypeData\n}) => {\n  const token = localStorage.getItem('token');\n  const [page, setPage] = useState(1);\n  const [count, setCount] = useState(10);\n  const [type, setType] = useState('I');\n  const [sort, setSort] = useState(false);\n  const [sortType, setSortType] = useState('createdAt');\n  const [reloadToggle, setReloadToggle] = useState(false);\n  const [searchKeyword, setSearchKeyword] = useState('');\n  const [status, setStatus] = useState(null);\n\n  useEffect(() => {\n    blogs(\n      token,\n      type,\n      page,\n      count,\n      sortType,\n      sort ? 'asc' : 'desc',\n      searchKeyword\n    );\n  }, [\n    blogs,\n    reloadToggle,\n    page,\n    sort,\n    searchKeyword,\n    isDeleteSuccess,\n    token,\n    type,\n    count,\n    sortType\n  ]);\n\n  useEffect(() => {\n    if (isDeleteSuccess) {\n      swal('Blog has been deleted!', {\n        buttons: false,\n        timer: 1500\n      });\n      resetDeleteBlog();\n    }\n\n    if (isDeleteError) {\n      swal('Something went wrong!', {\n        buttons: false,\n        timer: 1500\n      });\n      resetDeleteBlog();\n    }\n  }, [isDeleteSuccess, isDeleteError, resetDeleteBlog]);\n\n  useEffect(() => {\n    if (isChangeStatusSuccess) {\n      swal(\n        status === 'active'\n          ? 'Blog has been activated'\n          : 'Blog has been deactivated',\n        {\n          buttons: false,\n          timer: 1500\n        }\n      );\n      setReloadToggle(!reloadToggle);\n      resetStatus();\n    }\n\n    if (isChangeStatusError) {\n      swal('Something went wrong!', {\n        buttons: false,\n        timer: 1500\n      });\n      resetStatus();\n    }\n  }, [\n    isChangeStatusSuccess,\n    isChangeStatusError,\n    status,\n    reloadToggle,\n    resetStatus\n  ]);\n\n\n  useEffect(() => {\n    getCategory()\n  });\n\n  const getCategory=()=>{\n    let prm={\n      page:1,\n      count:10,\n      type: 'I',\n      sortBy: 'createdAt desc'\n    }\n    // categories(\n    //   token,\n    //   'I',\n    //   1,\n    //   1000,\n    //   '',\n    //   '',\n    //   ''\n    // );\n  }\n\n  const [formVisibility, setFormVisibilty] = useState(false);\n  const [isAddForm, setIsAddForm] = useState(false);\n  const [blogId, setBlogId] = useState(null);\n\n  const handleFormVisibilty = () => {\n    setFormVisibilty(!formVisibility);\n  };\n\n  const handAddFormToggle = bool => {\n    setIsAddForm(bool);\n  };\n\n  const getBlogId = id => {\n    setBlogId(id);\n  };\n\n  const getSearchKeyword = value => {\n    setSearchKeyword(value);\n  };\n\n  const getStatus = value => {\n    setStatus(value);\n  };\n\n  const toggleSort = value => {\n    setSort(!sort);\n    setSortType(value);\n  };\n\n  // console.log('isDeleteError', isDeleteError);\n  return (\n    <Layout title=\"Articles\">\n      <MainSidebar />\n      <div className=\"main-content\">\n        <section className=\"section\">\n          <SectionHeader title=\"Articles\" />\n          {!formVisibility ? (\n            <ArticleLsiting\n              handleFormVisibilty={handleFormVisibilty}\n              blogs={data && data.data && data.data}\n              total={data && data.data && data.data.total}\n              handAddFormToggle={handAddFormToggle}\n              getBlogId={getBlogId}\n              resetSingleBlog={resetSingleBlog}\n              deleteBlog={deleteBlog}\n              sort={sort}\n              setSort={setSort}\n              setPage={setPage}\n              isRequesting={isRequesting}\n              page={page}\n              count={count}\n              getSearchKeyword={getSearchKeyword}\n              changeStatus={changeStatus}\n              getStatus={getStatus}\n              toggleSort={toggleSort}\n            />\n          ) : (\n            <ArticleForm\n              catByTypeData={catByTypeData}\n              handleFormVisibilty={handleFormVisibilty}\n              isAddForm={isAddForm}\n              categories={categorData}\n              blogId={blogId}\n              setReloadToggle={setReloadToggle}\n              reloadToggle={reloadToggle}\n            />\n          )}\n        </section>\n      </div>\n    </Layout>\n  );\n};\n\nconst mapStateToProps = state => ({\n  data: state.blogs.data,\n  categorData: state.categories.data,\n  isRequesting: state.blogs.isRequesting,\n  isSuccess: state.blogs.isSuccess,\n  isError: state.blogs.isError,\n  isDeleteSuccess: state.deleteBlog.isSuccess,\n  isDeleteError: state.deleteBlog.isError,\n  isChangeStatusSuccess: state.status.isSuccess,\n  isChangeStatusError: state.status.isError,\n  catByTypeData: state.catByType.data\n});\n\nexport default connect(mapStateToProps, {\n  blogs,\n  resetSingleBlog,\n  deleteBlog,\n  categories,\n  resetDeleteBlog,\n  changeStatus,\n  resetStatus,\n  getCatByType\n})(Articles);\n"]},"metadata":{},"sourceType":"module"}