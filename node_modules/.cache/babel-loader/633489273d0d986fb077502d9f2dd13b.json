{"ast":null,"code":"var _jsxFileName = \"/home/jc-2/Documents/sociality-web/src/pages/Types.js\";\nimport React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport swal from 'sweetalert';\nimport Layout from '../components/global/Layout';\nimport MainSidebar from '../components/global/MainSidebar';\nimport SectionHeader from '../components/global/SectionHeader';\nimport QuestionListing from '../components/questions/QuestionListing';\nimport QuestionForm from '../components/questions/QuestionsForm';\nimport { types, resetSingleType, deleteType, resetDeleteType } from '../store/actions/typeActions';\nimport { changeStatus, resetStatus } from '../store/actions/changeStatusActions';\nimport TypeListing from '../components/types/TypeListing';\nimport TypeForm from '../components/types/TypeForm';\n\nconst Types = ({\n  data,\n  types,\n  resetSingleType,\n  deleteType,\n  resetDeleteType,\n  isDeleteSuccess,\n  isChangeStatusSuccess,\n  isChangeStatusError,\n  isDeleteError,\n  changeStatus,\n  resetStatus,\n  isRequesting,\n  isSuccess,\n  changeStatusRequesting\n}) => {\n  const token = localStorage.getItem('token');\n  const [page, setPage] = useState(1);\n  const [count, setCount] = useState(10);\n  const [type, setType] = useState('I');\n  const [sort, setSort] = useState(false);\n  const [sortType, setSortType] = useState('createdAt');\n  const [reloadToggle, setReloadToggle] = useState(false);\n  const [searchKeyword, setSearchKeyword] = useState('');\n  const [status, setStatus] = useState(null); // const [currentCount, setCurrentCount] = useState(count);\n\n  useEffect(() => {\n    types(token, type, page, count, sortType, sort ? 'asc' : 'desc', searchKeyword);\n  }, [reloadToggle, page, sort, searchKeyword, isDeleteSuccess, token, type, count, sortType, types]);\n  useEffect(() => {\n    if (isDeleteSuccess) {\n      swal('Type has been deleted!', {\n        buttons: false,\n        timer: 1500\n      });\n      resetDeleteType();\n    }\n\n    if (isDeleteError) {\n      swal('Something went wrong!', {\n        buttons: false,\n        timer: 1500\n      });\n      resetDeleteType();\n    }\n  }, [isDeleteSuccess, isDeleteError, resetDeleteType]);\n  useEffect(() => {\n    if (isChangeStatusSuccess) {\n      swal(status === 'active' ? 'Type has been activated' : 'Type has been deactivated', {\n        buttons: false,\n        timer: 1500\n      });\n      setReloadToggle(!reloadToggle);\n      resetStatus();\n    }\n\n    if (isChangeStatusError) {\n      swal('Something went wrong!', {\n        buttons: false,\n        timer: 1500\n      });\n      resetStatus();\n    }\n  }, [isChangeStatusSuccess, isChangeStatusError, status, reloadToggle, resetStatus]);\n  const [formVisibility, setFormVisibilty] = useState(false);\n  const [isAddForm, setIsAddForm] = useState(false);\n  const [typeId, setTypeId] = useState(null);\n\n  const handleFormVisibilty = () => {\n    setFormVisibilty(!formVisibility);\n  };\n\n  const handAddFormToggle = bool => {\n    setIsAddForm(bool);\n  };\n\n  const getTypeId = id => {\n    setTypeId(id);\n  };\n\n  const getSearchKeyword = value => {\n    setSearchKeyword(value);\n  };\n\n  const getStatus = value => {\n    setStatus(value);\n  };\n\n  const toggleSort = value => {\n    setSort(!sort);\n    setSortType(value);\n  };\n\n  console.log('data', data);\n  return /*#__PURE__*/React.createElement(Layout, {\n    title: \"Types\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(MainSidebar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"main-content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"section\", {\n    className: \"section\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(SectionHeader, {\n    title: \"Types\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 11\n    }\n  }), !formVisibility ? /*#__PURE__*/React.createElement(TypeListing, {\n    handleFormVisibilty: handleFormVisibilty,\n    questions: data && data.result,\n    total: data && data.total,\n    handAddFormToggle: handAddFormToggle,\n    getQuestionId: getTypeId,\n    isRequesting: isRequesting,\n    changeStatusRequesting: changeStatusRequesting // UserListing={UserListing}\n    ,\n    resetSingleQuestion: resetSingleType,\n    deleteQuestion: deleteType,\n    sort: sort,\n    setSort: setSort,\n    setPage: setPage,\n    page: page,\n    count: count,\n    getSearchKeyword: getSearchKeyword,\n    changeStatus: changeStatus,\n    getStatus: getStatus,\n    toggleSort: toggleSort,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 13\n    }\n  }) : /*#__PURE__*/React.createElement(TypeForm, {\n    handleFormVisibilty: handleFormVisibilty,\n    isAddForm: isAddForm,\n    questionId: typeId,\n    setReloadToggle: setReloadToggle,\n    reloadToggle: reloadToggle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 13\n    }\n  }))));\n};\n\nconst mapStateToProps = state => ({\n  data: state.types.data,\n  isRequesting: state.types.isRequesting,\n  isSuccess: state.types.isSuccess,\n  isError: state.types.isError,\n  isDeleteSuccess: state.deleteType.isSuccess,\n  isDeleteError: state.deleteType.isError,\n  changeStatusRequesting: state.status.isRequesting,\n  isChangeStatusSuccess: state.status.isSuccess,\n  isChangeStatusError: state.status.isError\n});\n\nexport default connect(mapStateToProps, {\n  types,\n  resetSingleType,\n  deleteType,\n  resetDeleteType,\n  changeStatus,\n  resetStatus\n})(Types);","map":{"version":3,"sources":["/home/jc-2/Documents/sociality-web/src/pages/Types.js"],"names":["React","useState","useEffect","connect","swal","Layout","MainSidebar","SectionHeader","QuestionListing","QuestionForm","types","resetSingleType","deleteType","resetDeleteType","changeStatus","resetStatus","TypeListing","TypeForm","Types","data","isDeleteSuccess","isChangeStatusSuccess","isChangeStatusError","isDeleteError","isRequesting","isSuccess","changeStatusRequesting","token","localStorage","getItem","page","setPage","count","setCount","type","setType","sort","setSort","sortType","setSortType","reloadToggle","setReloadToggle","searchKeyword","setSearchKeyword","status","setStatus","buttons","timer","formVisibility","setFormVisibilty","isAddForm","setIsAddForm","typeId","setTypeId","handleFormVisibilty","handAddFormToggle","bool","getTypeId","id","getSearchKeyword","value","getStatus","toggleSort","console","log","result","total","mapStateToProps","state","isError"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\n\nimport swal from 'sweetalert';\nimport Layout from '../components/global/Layout';\nimport MainSidebar from '../components/global/MainSidebar';\nimport SectionHeader from '../components/global/SectionHeader';\nimport QuestionListing from '../components/questions/QuestionListing';\nimport QuestionForm from '../components/questions/QuestionsForm';\nimport {\n  types,\n  resetSingleType,\n  deleteType,\n  resetDeleteType\n} from '../store/actions/typeActions';\nimport {\n  changeStatus,\n  resetStatus\n} from '../store/actions/changeStatusActions';\nimport TypeListing from '../components/types/TypeListing';\nimport TypeForm from '../components/types/TypeForm';\n\nconst Types = ({\n  data,\n  types,\n  resetSingleType,\n  deleteType,\n  resetDeleteType,\n  isDeleteSuccess,\n  isChangeStatusSuccess,\n  isChangeStatusError,\n  isDeleteError,\n  changeStatus,\n  resetStatus,\n  isRequesting,\n  isSuccess,\n  changeStatusRequesting\n}) => {\n  const token = localStorage.getItem('token');\n  const [page, setPage] = useState(1);\n  const [count, setCount] = useState(10);\n  const [type, setType] = useState('I');\n  const [sort, setSort] = useState(false);\n  const [sortType, setSortType] = useState('createdAt');\n  const [reloadToggle, setReloadToggle] = useState(false);\n  const [searchKeyword, setSearchKeyword] = useState('');\n  const [status, setStatus] = useState(null);\n  // const [currentCount, setCurrentCount] = useState(count);\n\n  useEffect(() => {\n    types(\n      token,\n      type,\n      page,\n      count,\n      sortType,\n      sort ? 'asc' : 'desc',\n      searchKeyword\n    );\n  }, [\n    reloadToggle,\n    page,\n    sort,\n    searchKeyword,\n    isDeleteSuccess,\n    token,\n    type,\n    count,\n    sortType,\n    types\n  ]);\n\n  useEffect(() => {\n    if (isDeleteSuccess) {\n      swal('Type has been deleted!', {\n        buttons: false,\n        timer: 1500\n      });\n      resetDeleteType();\n    }\n\n    if (isDeleteError) {\n      swal('Something went wrong!', {\n        buttons: false,\n        timer: 1500\n      });\n      resetDeleteType();\n    }\n  }, [isDeleteSuccess, isDeleteError, resetDeleteType]);\n\n  useEffect(() => {\n    if (isChangeStatusSuccess) {\n      swal(\n        status === 'active'\n          ? 'Type has been activated'\n          : 'Type has been deactivated',\n        {\n          buttons: false,\n          timer: 1500\n        }\n      );\n      setReloadToggle(!reloadToggle);\n      resetStatus();\n    }\n\n    if (isChangeStatusError) {\n      swal('Something went wrong!', {\n        buttons: false,\n        timer: 1500\n      });\n      resetStatus();\n    }\n  }, [\n    isChangeStatusSuccess,\n    isChangeStatusError,\n    status,\n    reloadToggle,\n    resetStatus\n  ]);\n\n  const [formVisibility, setFormVisibilty] = useState(false);\n  const [isAddForm, setIsAddForm] = useState(false);\n  const [typeId, setTypeId] = useState(null);\n\n  const handleFormVisibilty = () => {\n    setFormVisibilty(!formVisibility);\n  };\n\n  const handAddFormToggle = bool => {\n    setIsAddForm(bool);\n  };\n\n  const getTypeId = id => {\n    setTypeId(id);\n  };\n\n  const getSearchKeyword = value => {\n    setSearchKeyword(value);\n  };\n\n  const getStatus = value => {\n    setStatus(value);\n  };\n\n  const toggleSort = value => {\n    setSort(!sort);\n    setSortType(value);\n  };\n\n  console.log('data', data);\n  return (\n    <Layout title=\"Types\">\n      <MainSidebar />\n      <div className=\"main-content\">\n        <section className=\"section\">\n          <SectionHeader title=\"Types\" />\n          {!formVisibility ? (\n            <TypeListing\n              handleFormVisibilty={handleFormVisibilty}\n              questions={data && data.result}\n              total={data && data.total}\n              handAddFormToggle={handAddFormToggle}\n              getQuestionId={getTypeId}\n              isRequesting={isRequesting}\n              changeStatusRequesting={changeStatusRequesting}\n              // UserListing={UserListing}\n              resetSingleQuestion={resetSingleType}\n              deleteQuestion={deleteType}\n              sort={sort}\n              setSort={setSort}\n              setPage={setPage}\n              page={page}\n              count={count}\n              getSearchKeyword={getSearchKeyword}\n              changeStatus={changeStatus}\n              getStatus={getStatus}\n              toggleSort={toggleSort}\n            />\n          ) : (\n            <TypeForm\n              handleFormVisibilty={handleFormVisibilty}\n              isAddForm={isAddForm}\n              questionId={typeId}\n              setReloadToggle={setReloadToggle}\n              reloadToggle={reloadToggle}\n            />\n          )}\n        </section>\n      </div>\n    </Layout>\n  );\n};\n\nconst mapStateToProps = state => ({\n  data: state.types.data,\n  isRequesting: state.types.isRequesting,\n  isSuccess: state.types.isSuccess,\n  isError: state.types.isError,\n  isDeleteSuccess: state.deleteType.isSuccess,\n  isDeleteError: state.deleteType.isError,\n  changeStatusRequesting: state.status.isRequesting,\n  isChangeStatusSuccess: state.status.isSuccess,\n  isChangeStatusError: state.status.isError\n});\n\nexport default connect(mapStateToProps, {\n  types,\n  resetSingleType,\n  deleteType,\n  resetDeleteType,\n  changeStatus,\n  resetStatus\n})(Types);\n"]},"metadata":{},"sourceType":"module"}