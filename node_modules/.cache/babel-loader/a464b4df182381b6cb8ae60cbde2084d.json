{"ast":null,"code":"/**\n * @description :  This file has plan type add, edit, delete, blog detail functions\n * @param: CRUD values and access token\n * @return : Boolean and success, error message\n * @author JC Software Solution PVT. LTD.\n */\nimport { isUndefined } from 'lodash';\nimport { AXIOS_INSTANCE, TYPE_ADD, SINGLE_TYPE_API, DELETE_API, TYPE_UPDATE, GET_TYPES, GET_SINGLE_TYPE, DELETE_SINGLE_TYPE, TYPES_API } from '../constants';\nimport { checkHttpStatus, parseJSON } from '../../utils/helpers';\nimport { getRequest, getSuccess, getFailure, reset } from './index'; // add plan type\n\nexport function typeAdd(postObj, token) {\n  return dispatch => {\n    dispatch(getRequest(TYPE_ADD.TYPE_ADD_REQUEST));\n    const getUrl = TYPES_API;\n    const config = {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    };\n    AXIOS_INSTANCE.post(getUrl, postObj, config).then(checkHttpStatus).then(parseJSON).then(data => {\n      // console.log('response', data);\n      if (data.success) {\n        dispatch(getSuccess(TYPE_ADD.TYPE_ADD_SUCCESS, data));\n      }\n    }).catch(error => {\n      // console.log('error', error.response);\n      const errorMessage = error.response && error.response.data && error.response.data.error ? error.response.data.error.message : 'Something went wrong!';\n      dispatch(getFailure(TYPE_ADD.TYPE_ADD_FAILURE, {\n        data: {\n          statusCode: 403,\n          // statusText: (error_message.message) ? error_message.message : \"Something went wrong. Please try again later.\",\n          message: errorMessage\n        }\n      }));\n    });\n  };\n} // update plan type\n\nexport function typeUpdate(obj, id, token) {\n  return dispatch => {\n    dispatch(getRequest(TYPE_UPDATE.TYPE_UPDATE_REQUEST));\n    const getUrl = `${TYPES_API}/${id}`;\n    const config = {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    };\n    AXIOS_INSTANCE.put(getUrl, obj, config).then(checkHttpStatus).then(parseJSON).then(data => {\n      // console.log('updateUser', data);\n      if (data.success) {\n        dispatch(getSuccess(TYPE_UPDATE.TYPE_UPDATE_SUCCESS, data));\n      }\n    }).catch(error => {\n      // console.log('error', error.response);\n      const errorMessage = error.response && error.response.data && error.response.data.error_description ? error.response.data.error_description : 'Something went wrong!';\n      dispatch(getFailure(TYPE_UPDATE.TYPE_UPDATE_FAILURE, {\n        data: {\n          statusCode: 403,\n          // statusText: (error_message.message) ? error_message.message : \"Something went wrong. Please try again later.\",\n          message: errorMessage\n        }\n      }));\n    });\n  };\n} // get all plan types\n\nexport function types(token, type, page, count, sortType, sort, search) {\n  return dispatch => {\n    dispatch(getRequest(GET_TYPES.GET_TYPES_REQUEST));\n    let getUrl = `${TYPES_API}?type=${type}&search=${search}&page=${page}&count=${10}&sortBy=${sortType} ${sort}`;\n\n    if (isUndefined(type) || isUndefined(page) || isUndefined(sortType) || isUndefined(sort) || isUndefined(search)) {\n      getUrl = `${TYPES_API}`;\n    }\n\n    const config = {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    };\n    AXIOS_INSTANCE.get(getUrl, config).then(checkHttpStatus).then(parseJSON).then(data => {\n      // console.log('response', data);\n      if (data.success) {\n        dispatch(getSuccess(GET_TYPES.GET_TYPES_SUCCESS, data));\n      }\n    }).catch(error => {\n      // console.log('error', error.response);\n      const errorMessage = error.response && error.response.data && error.response.data.error_description ? error.response.data.error_description : 'Something went wrong!';\n      dispatch(getFailure(GET_TYPES.GET_TYPES_FAILURE, {\n        data: {\n          statusCode: 403,\n          // statusText: (error_message.message) ? error_message.message : \"Something went wrong. Please try again later.\",\n          message: errorMessage\n        }\n      }));\n    });\n  };\n} // get single plan type\n\nexport function singleType(id, token) {\n  return dispatch => {\n    dispatch(getRequest(GET_SINGLE_TYPE.GET_SINGLE_TYPE_REQUEST));\n    const getUrl = `${TYPES_API}/${id}`;\n    const config = {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    };\n    AXIOS_INSTANCE.get(getUrl, config).then(checkHttpStatus).then(parseJSON).then(data => {\n      // console.log('singleCategory', data);\n      if (data.success) {\n        dispatch(getSuccess(GET_SINGLE_TYPE.GET_SINGLE_TYPE_SUCCESS, data.data));\n      }\n    }).catch(error => {\n      // console.log('error', error.response);\n      const errorMessage = error.response && error.response.data && error.response.data.error_description ? error.response.data.error_description : 'Something went wrong!';\n      dispatch(getFailure(GET_SINGLE_TYPE.GET_SINGLE_TYPE_SUCCESS, {\n        data: {\n          statusCode: 403,\n          // statusText: (error_message.message) ? error_message.message : \"Something went wrong. Please try again later.\",\n          message: errorMessage\n        }\n      }));\n    });\n  };\n} // delete single plan type\n\nexport function deleteType(obj, token) {\n  return dispatch => {\n    dispatch(getRequest(DELETE_SINGLE_TYPE.DELETE_SINGLE_TYPE_REQUEST));\n    const getUrl = `${DELETE_API}`;\n    const config = {\n      headers: {\n        Authorization: `Bearer ${token}`\n      },\n      data: obj\n    };\n    AXIOS_INSTANCE.delete(getUrl, config).then(checkHttpStatus).then(parseJSON).then(data => {\n      // console.log('deleteUser', data);\n      if (data.success) {\n        dispatch(getSuccess(DELETE_SINGLE_TYPE.DELETE_SINGLE_TYPE_SUCCESS, data.data));\n      }\n    }).catch(error => {\n      // console.log('error', error.response);\n      const errorMessage = error.response && error.response.data && error.response.data.error_description ? error.response.data.error_description : 'Something went wrong!';\n      dispatch(getFailure(DELETE_SINGLE_TYPE.DELETE_SINGLE_TYPE_FAILURE, {\n        data: {\n          statusCode: 403,\n          // statusText: (error_message.message) ? error_message.message : \"Something went wrong. Please try again later.\",\n          message: errorMessage\n        }\n      }));\n    });\n  };\n}\nexport function resetDeleteType() {\n  return dispatch => {\n    dispatch(reset(DELETE_SINGLE_TYPE.DELETE_SINGLE_TYPE_REQUEST));\n  };\n}\nexport function resetAddType() {\n  return dispatch => {\n    dispatch(reset(TYPE_ADD.TYPE_ADD_RESET));\n  };\n}\nexport function resetSingleType() {\n  return dispatch => {\n    dispatch(reset(GET_SINGLE_TYPE.GET_SINGLE_TYPE_RESET));\n  };\n}\nexport function resetUpdateType() {\n  return dispatch => {\n    dispatch(reset(TYPE_UPDATE.TYPE_UPDATE_RESET));\n  };\n}","map":{"version":3,"sources":["/home/user/Documents/socialify/sociality-web/src/store/actions/typeActions.js"],"names":["isUndefined","AXIOS_INSTANCE","TYPE_ADD","SINGLE_TYPE_API","DELETE_API","TYPE_UPDATE","GET_TYPES","GET_SINGLE_TYPE","DELETE_SINGLE_TYPE","TYPES_API","checkHttpStatus","parseJSON","getRequest","getSuccess","getFailure","reset","typeAdd","postObj","token","dispatch","TYPE_ADD_REQUEST","getUrl","config","headers","Authorization","post","then","data","success","TYPE_ADD_SUCCESS","catch","error","errorMessage","response","message","TYPE_ADD_FAILURE","statusCode","typeUpdate","obj","id","TYPE_UPDATE_REQUEST","put","TYPE_UPDATE_SUCCESS","error_description","TYPE_UPDATE_FAILURE","types","type","page","count","sortType","sort","search","GET_TYPES_REQUEST","get","GET_TYPES_SUCCESS","GET_TYPES_FAILURE","singleType","GET_SINGLE_TYPE_REQUEST","GET_SINGLE_TYPE_SUCCESS","deleteType","DELETE_SINGLE_TYPE_REQUEST","delete","DELETE_SINGLE_TYPE_SUCCESS","DELETE_SINGLE_TYPE_FAILURE","resetDeleteType","resetAddType","TYPE_ADD_RESET","resetSingleType","GET_SINGLE_TYPE_RESET","resetUpdateType","TYPE_UPDATE_RESET"],"mappings":"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","sourcesContent":["/**\n * @description :  This file has plan type add, edit, delete, blog detail functions\n * @param: CRUD values and access token\n * @return : Boolean and success, error message\n * @author JC Software Solution PVT. LTD.\n */\n\nimport { isUndefined } from 'lodash';\nimport {\n  AXIOS_INSTANCE,\n  TYPE_ADD,\n  SINGLE_TYPE_API,\n  DELETE_API,\n  TYPE_UPDATE,\n  GET_TYPES,\n  GET_SINGLE_TYPE,\n  DELETE_SINGLE_TYPE,\n  TYPES_API\n} from '../constants';\nimport { checkHttpStatus, parseJSON } from '../../utils/helpers';\nimport { getRequest, getSuccess, getFailure, reset } from './index';\n\n// add plan type\n\nexport function typeAdd(postObj, token) {\n  return dispatch => {\n    dispatch(getRequest(TYPE_ADD.TYPE_ADD_REQUEST));\n    const getUrl = TYPES_API;\n    const config = { headers: { Authorization: `Bearer ${token}` } };\n    AXIOS_INSTANCE.post(getUrl, postObj, config)\n      .then(checkHttpStatus)\n      .then(parseJSON)\n      .then(data => {\n        // console.log('response', data);\n        if (data.success) {\n          dispatch(getSuccess(TYPE_ADD.TYPE_ADD_SUCCESS, data));\n        }\n      })\n      .catch(error => {\n        // console.log('error', error.response);\n        const errorMessage =\n          error.response && error.response.data && error.response.data.error\n            ? error.response.data.error.message\n            : 'Something went wrong!';\n        dispatch(\n          getFailure(TYPE_ADD.TYPE_ADD_FAILURE, {\n            data: {\n              statusCode: 403,\n              // statusText: (error_message.message) ? error_message.message : \"Something went wrong. Please try again later.\",\n              message: errorMessage\n            }\n          })\n        );\n      });\n  };\n}\n\n// update plan type\n\nexport function typeUpdate(obj, id, token) {\n  return dispatch => {\n    dispatch(getRequest(TYPE_UPDATE.TYPE_UPDATE_REQUEST));\n    const getUrl = `${TYPES_API}/${id}`;\n    const config = { headers: { Authorization: `Bearer ${token}` } };\n    AXIOS_INSTANCE.put(getUrl, obj, config)\n      .then(checkHttpStatus)\n      .then(parseJSON)\n      .then(data => {\n        // console.log('updateUser', data);\n        if (data.success) {\n          dispatch(getSuccess(TYPE_UPDATE.TYPE_UPDATE_SUCCESS, data));\n        }\n      })\n      .catch(error => {\n        // console.log('error', error.response);\n        const errorMessage =\n          error.response &&\n          error.response.data &&\n          error.response.data.error_description\n            ? error.response.data.error_description\n            : 'Something went wrong!';\n        dispatch(\n          getFailure(TYPE_UPDATE.TYPE_UPDATE_FAILURE, {\n            data: {\n              statusCode: 403,\n              // statusText: (error_message.message) ? error_message.message : \"Something went wrong. Please try again later.\",\n              message: errorMessage\n            }\n          })\n        );\n      });\n  };\n}\n\n// get all plan types\n\nexport function types(token, type, page, count, sortType, sort, search) {\n  return dispatch => {\n    dispatch(getRequest(GET_TYPES.GET_TYPES_REQUEST));\n\n    let getUrl = `${TYPES_API}?type=${type}&search=${search}&page=${page}&count=${10}&sortBy=${sortType} ${sort}`;\n    if (\n      isUndefined(type) ||\n      isUndefined(page) ||\n      isUndefined(sortType) ||\n      isUndefined(sort) ||\n      isUndefined(search)\n    ) {\n      getUrl = `${TYPES_API}`;\n    }\n    const config = { headers: { Authorization: `Bearer ${token}` } };\n    AXIOS_INSTANCE.get(getUrl, config)\n      .then(checkHttpStatus)\n      .then(parseJSON)\n      .then(data => {\n        // console.log('response', data);\n        if (data.success) {\n          dispatch(getSuccess(GET_TYPES.GET_TYPES_SUCCESS, data));\n        }\n      })\n      .catch(error => {\n        // console.log('error', error.response);\n        const errorMessage =\n          error.response &&\n          error.response.data &&\n          error.response.data.error_description\n            ? error.response.data.error_description\n            : 'Something went wrong!';\n        dispatch(\n          getFailure(GET_TYPES.GET_TYPES_FAILURE, {\n            data: {\n              statusCode: 403,\n              // statusText: (error_message.message) ? error_message.message : \"Something went wrong. Please try again later.\",\n              message: errorMessage\n            }\n          })\n        );\n      });\n  };\n}\n\n// get single plan type\n\nexport function singleType(id, token) {\n  return dispatch => {\n    dispatch(getRequest(GET_SINGLE_TYPE.GET_SINGLE_TYPE_REQUEST));\n    const getUrl = `${TYPES_API}/${id}`;\n    const config = { headers: { Authorization: `Bearer ${token}` } };\n    AXIOS_INSTANCE.get(getUrl, config)\n      .then(checkHttpStatus)\n      .then(parseJSON)\n      .then(data => {\n        // console.log('singleCategory', data);\n        if (data.success) {\n          dispatch(\n            getSuccess(GET_SINGLE_TYPE.GET_SINGLE_TYPE_SUCCESS, data.data)\n          );\n        }\n      })\n      .catch(error => {\n        // console.log('error', error.response);\n        const errorMessage =\n          error.response &&\n          error.response.data &&\n          error.response.data.error_description\n            ? error.response.data.error_description\n            : 'Something went wrong!';\n        dispatch(\n          getFailure(GET_SINGLE_TYPE.GET_SINGLE_TYPE_SUCCESS, {\n            data: {\n              statusCode: 403,\n              // statusText: (error_message.message) ? error_message.message : \"Something went wrong. Please try again later.\",\n              message: errorMessage\n            }\n          })\n        );\n      });\n  };\n}\n\n// delete single plan type\n\nexport function deleteType(obj, token) {\n  return dispatch => {\n    dispatch(getRequest(DELETE_SINGLE_TYPE.DELETE_SINGLE_TYPE_REQUEST));\n    const getUrl = `${DELETE_API}`;\n    const config = { headers: { Authorization: `Bearer ${token}` }, data: obj };\n    AXIOS_INSTANCE.delete(getUrl, config)\n      .then(checkHttpStatus)\n      .then(parseJSON)\n      .then(data => {\n        // console.log('deleteUser', data);\n        if (data.success) {\n          dispatch(\n            getSuccess(DELETE_SINGLE_TYPE.DELETE_SINGLE_TYPE_SUCCESS, data.data)\n          );\n        }\n      })\n      .catch(error => {\n        // console.log('error', error.response);\n        const errorMessage =\n          error.response &&\n          error.response.data &&\n          error.response.data.error_description\n            ? error.response.data.error_description\n            : 'Something went wrong!';\n        dispatch(\n          getFailure(DELETE_SINGLE_TYPE.DELETE_SINGLE_TYPE_FAILURE, {\n            data: {\n              statusCode: 403,\n              // statusText: (error_message.message) ? error_message.message : \"Something went wrong. Please try again later.\",\n              message: errorMessage\n            }\n          })\n        );\n      });\n  };\n}\n\nexport function resetDeleteType() {\n  return dispatch => {\n    dispatch(reset(DELETE_SINGLE_TYPE.DELETE_SINGLE_TYPE_REQUEST));\n  };\n}\n\nexport function resetAddType() {\n  return dispatch => {\n    dispatch(reset(TYPE_ADD.TYPE_ADD_RESET));\n  };\n}\n\nexport function resetSingleType() {\n  return dispatch => {\n    dispatch(reset(GET_SINGLE_TYPE.GET_SINGLE_TYPE_RESET));\n  };\n}\n\nexport function resetUpdateType() {\n  return dispatch => {\n    dispatch(reset(TYPE_UPDATE.TYPE_UPDATE_RESET));\n  };\n}\n"]},"metadata":{},"sourceType":"module"}