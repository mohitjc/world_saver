{"ast":null,"code":"var _jsxFileName = \"/home/jc-2/Documents/sociality-web/src/components/Posts/PostData.js\";\nimport React, { useState, useEffect } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport swal from 'sweetalert';\nimport { isNull } from 'lodash';\nimport { posts, resetSingleUser, deleteUser, resetDeleteUser, deletePost } from '../../store/actions/userActions';\nimport { changeStatus, resetStatus } from '../../store/actions/changeStatusActions';\nimport Posts from './Posts';\nimport Layout from '../global/Layout';\nimport MainSidebar from '../global/MainSidebar';\nimport SectionHeader from '../global/SectionHeader';\nimport UserForm from '../user/UserForm';\n\nconst PostData = ({\n  posts,\n  data,\n  resetSingleUser,\n  deleteUser,\n  deletePost,\n  resetDeleteUser,\n  isDeleteSuccess,\n  isDeleteError,\n  isChangeStatusSuccess,\n  isChangeStatusError,\n  changeStatus,\n  resetStatus,\n  isSuccess,\n  location,\n  isRequesting\n}) => {\n  const [allUsers, setAllUsers] = useState(null);\n  const token = localStorage.getItem('token');\n  const [page, setPage] = useState(1);\n  const [count, setCount] = useState(10);\n  const [type, setType] = useState('');\n  const [sortType, setSortType] = useState('createdAt');\n  const [sort, setSort] = useState(false);\n  const [roles, setRoles] = useState(location.state && location.state.role);\n  const [reloadToggle, setReloadToggle] = useState(false);\n  const [searchKeyword, setSearchKeyword] = useState('');\n  const [status, setStatus] = useState(null); // const [currentCount, setCurrentCount] = useState(count);\n\n  console.log(posts, \"pagepage\");\n  useEffect(() => {\n    if (isNull(location.state && location.state.role)) {\n      posts(token, type, page, count, sortType, '', sort ? 'asc' : 'desc', searchKeyword);\n    } else {\n      posts(token, type, page, count, sortType, roles, sort ? 'asc' : 'desc', searchKeyword);\n    }\n  }, [posts, reloadToggle, page, sort, roles, searchKeyword, isDeleteSuccess, location.state, token, type, count, sortType]);\n  useEffect(() => {\n    if (isDeleteSuccess) {\n      swal('User has been deleted!', {\n        buttons: false,\n        timer: 1500\n      });\n    }\n\n    if (isDeleteError) {\n      swal('User has been deleted');\n    }\n\n    resetDeleteUser();\n  }, [isDeleteError, isDeleteSuccess, resetDeleteUser]);\n  useEffect(() => {\n    if (isChangeStatusSuccess) {\n      swal(status === 'active' ? 'User has been activated' : 'User has been deactivated', {\n        buttons: false,\n        timer: 1500\n      });\n      setReloadToggle(!reloadToggle);\n      resetStatus();\n    }\n\n    if (isChangeStatusError) {\n      swal('Something went wrong!', {\n        buttons: false,\n        timer: 1500\n      });\n      resetStatus();\n    }\n  }, [isChangeStatusSuccess, isChangeStatusError, status, reloadToggle, resetStatus]);\n  const [formVisibility, setFormVisibilty] = useState(false);\n  const [isAddForm, setIsAddForm] = useState(false);\n  const [userId, setUserId] = useState(null);\n\n  const handleFormVisibilty = () => {\n    setFormVisibilty(!formVisibility);\n  };\n\n  const handAddFormToggle = bool => {\n    setIsAddForm(bool);\n  };\n\n  const getUserId = id => {\n    setUserId(id);\n  };\n\n  const getSearchKeyword = value => {\n    setSearchKeyword(value);\n  };\n\n  const getStatus = value => {\n    setStatus(value);\n  };\n\n  const toggleSort = value => {\n    setSort(!sort);\n    setSortType(value);\n  };\n\n  const handleTitleChange = () => {\n    if (roles === 'U') {\n      return 'Users';\n    }\n\n    if (roles === 'A') {\n      return 'Admins';\n    }\n\n    if (location.state && location.state.role === null) {\n      return 'All Users';\n    }\n  }; // console.log('roles', location.state && location.state.role);\n\n\n  return /*#__PURE__*/React.createElement(Layout, {\n    title: \"Posts\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(MainSidebar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"main-content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"section\", {\n    className: \"section\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(SectionHeader, {\n    title: handleTitleChange(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 21\n    }\n  }), !formVisibility ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Posts, {\n    handleFormVisibilty: handleFormVisibilty,\n    users: data && data.result,\n    total: data && data.total,\n    handAddFormToggle: handAddFormToggle,\n    getUserId: getUserId,\n    isRequesting: isRequesting // UserListing={UserListing}\n    ,\n    resetSingleUser: resetSingleUser,\n    deleteUser: deleteUser,\n    deletePost: deletePost,\n    sort: sort,\n    posts: posts,\n    setSort: setSort,\n    setPage: setPage,\n    page: page,\n    count: count,\n    getSearchKeyword: getSearchKeyword,\n    changeStatus: changeStatus,\n    getStatus: getStatus,\n    toggleSort: toggleSort,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 29\n    }\n  })) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(UserForm, {\n    handleFormVisibilty: handleFormVisibilty,\n    isAddForm: isAddForm,\n    userId: userId,\n    setReloadToggle: setReloadToggle,\n    reloadToggle: reloadToggle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 29\n    }\n  })))));\n};\n\nconst mapStateToProps = state => (console.log(state, 'state1'), {\n  data: state.Posts.data,\n  isRequesting: state.Posts.isRequesting,\n  isSuccess: state.Posts.isSuccess,\n  isError: state.Posts.isError,\n  isDeleteSuccess: state.deletePost.isSuccess,\n  isDeleteError: state.deletePost.isError,\n  isChangeStatusSuccess: state.status.isSuccess,\n  isChangeStatusError: state.status.isError\n});\n\nexport default connect(mapStateToProps, {\n  posts,\n  resetSingleUser,\n  deleteUser,\n  deletePost,\n  resetDeleteUser,\n  changeStatus,\n  resetStatus\n})(withRouter(PostData));","map":{"version":3,"sources":["/home/jc-2/Documents/sociality-web/src/components/Posts/PostData.js"],"names":["React","useState","useEffect","withRouter","connect","swal","isNull","posts","resetSingleUser","deleteUser","resetDeleteUser","deletePost","changeStatus","resetStatus","Posts","Layout","MainSidebar","SectionHeader","UserForm","PostData","data","isDeleteSuccess","isDeleteError","isChangeStatusSuccess","isChangeStatusError","isSuccess","location","isRequesting","allUsers","setAllUsers","token","localStorage","getItem","page","setPage","count","setCount","type","setType","sortType","setSortType","sort","setSort","roles","setRoles","state","role","reloadToggle","setReloadToggle","searchKeyword","setSearchKeyword","status","setStatus","console","log","buttons","timer","formVisibility","setFormVisibilty","isAddForm","setIsAddForm","userId","setUserId","handleFormVisibilty","handAddFormToggle","bool","getUserId","id","getSearchKeyword","value","getStatus","toggleSort","handleTitleChange","result","total","mapStateToProps","isError"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nimport swal from 'sweetalert';\nimport { isNull } from 'lodash';\n\nimport {\n    posts,\n    resetSingleUser,\n    deleteUser,\n    resetDeleteUser,\n    deletePost,\n} from '../../store/actions/userActions';\n\nimport {\n    changeStatus,\n    resetStatus\n} from '../../store/actions/changeStatusActions';\nimport Posts from './Posts';\nimport Layout from '../global/Layout';\nimport MainSidebar from '../global/MainSidebar';\nimport SectionHeader from '../global/SectionHeader';\nimport UserForm from '../user/UserForm';\n\nconst PostData = ({\n    posts,\n    data,\n    resetSingleUser,\n    deleteUser,\n    deletePost,\n    resetDeleteUser,\n    isDeleteSuccess,\n    isDeleteError,\n    isChangeStatusSuccess,\n    isChangeStatusError,\n    changeStatus,\n    resetStatus,\n    isSuccess,\n    location,\n    isRequesting\n}) => {\n    const [allUsers, setAllUsers] = useState(null);\n    const token = localStorage.getItem('token');\n    const [page, setPage] = useState(1);\n    const [count, setCount] = useState(10);\n    const [type, setType] = useState('');\n    const [sortType, setSortType] = useState('createdAt');\n    const [sort, setSort] = useState(false);\n    const [roles, setRoles] = useState(location.state && location.state.role);\n    const [reloadToggle, setReloadToggle] = useState(false);\n    const [searchKeyword, setSearchKeyword] = useState('');\n    const [status, setStatus] = useState(null);\n    // const [currentCount, setCurrentCount] = useState(count);\n    console.log(posts, \"pagepage\");\n\n    useEffect(() => {\n        if (isNull(location.state && location.state.role)) {\n            posts(\n                token,\n                type,\n                page,\n                count,\n                sortType,\n                '',\n                sort ? 'asc' : 'desc',\n                searchKeyword\n            );\n        } else {\n            posts(\n                token,\n                type,\n                page,\n                count,\n                sortType,\n                roles,\n                sort ? 'asc' : 'desc',\n                searchKeyword\n            );\n        }\n    }, [\n        posts,\n        reloadToggle,\n        page,\n        sort,\n        roles,\n        searchKeyword,\n        isDeleteSuccess,\n        location.state,\n        token,\n        type,\n        count,\n        sortType\n    ]);\n\n    useEffect(() => {\n        if (isDeleteSuccess) {\n            swal('User has been deleted!', {\n                buttons: false,\n                timer: 1500\n            });\n        }\n\n        if (isDeleteError) {\n            swal('User has been deleted');\n        }\n        resetDeleteUser();\n    }, [isDeleteError, isDeleteSuccess, resetDeleteUser]);\n\n    useEffect(() => {\n        if (isChangeStatusSuccess) {\n            swal(\n                status === 'active'\n                    ? 'User has been activated'\n                    : 'User has been deactivated',\n                {\n                    buttons: false,\n                    timer: 1500\n                }\n            );\n            setReloadToggle(!reloadToggle);\n            resetStatus();\n        }\n\n        if (isChangeStatusError) {\n            swal('Something went wrong!', {\n                buttons: false,\n                timer: 1500\n            });\n            resetStatus();\n        }\n    }, [\n        isChangeStatusSuccess,\n        isChangeStatusError,\n        status,\n        reloadToggle,\n        resetStatus\n    ]);\n\n    const [formVisibility, setFormVisibilty] = useState(false);\n    const [isAddForm, setIsAddForm] = useState(false);\n    const [userId, setUserId] = useState(null);\n\n    const handleFormVisibilty = () => {\n        setFormVisibilty(!formVisibility);\n    };\n\n    const handAddFormToggle = bool => {\n        setIsAddForm(bool);\n    };\n\n    const getUserId = id => {\n        setUserId(id);\n    };\n\n    const getSearchKeyword = value => {\n        setSearchKeyword(value);\n    };\n\n    const getStatus = value => {\n        setStatus(value);\n    };\n\n    const toggleSort = value => {\n        setSort(!sort);\n        setSortType(value);\n    };\n\n    const handleTitleChange = () => {\n        if (roles === 'U') {\n            return 'Users';\n        }\n        if (roles === 'A') {\n            return 'Admins';\n        }\n        if (location.state && location.state.role === null) {\n            return 'All Users';\n        }\n    };\n\n    // console.log('roles', location.state && location.state.role);\n    return (\n        <Layout title=\"Posts\">\n            <MainSidebar />\n            <div className=\"main-content\">\n\n                <section className=\"section\">\n                    <SectionHeader title={handleTitleChange()} /> \n                    {!formVisibility ? (\n                        <>\n                            <Posts\n                                handleFormVisibilty={handleFormVisibilty}\n                                users={data && data.result}\n                                total={data && data.total}\n                                handAddFormToggle={handAddFormToggle}\n                                getUserId={getUserId}\n                                isRequesting={isRequesting}\n                                // UserListing={UserListing}\n                                resetSingleUser={resetSingleUser}\n                                deleteUser={deleteUser}\n                                deletePost={deletePost}\n                                sort={sort}\n                                posts={posts}\n                                setSort={setSort}\n                                setPage={setPage}\n                                page={page}\n                                count={count}\n                                getSearchKeyword={getSearchKeyword}\n                                changeStatus={changeStatus}\n                                getStatus={getStatus}\n                                toggleSort={toggleSort}\n                            />\n\n                        </>\n                    ) : (\n                        <>\n\n                            <UserForm\n                                handleFormVisibilty={handleFormVisibilty}\n                                isAddForm={isAddForm}\n                                userId={userId}\n                                setReloadToggle={setReloadToggle}\n                                reloadToggle={reloadToggle}\n                            />\n                        </>\n                    )}\n                </section>\n            </div>\n        </Layout>\n    );\n};\n\nconst mapStateToProps = state => (\n    console.log(state, 'state1'),\n\n    {\n        data: state.Posts.data,\n        isRequesting: state.Posts.isRequesting,\n        isSuccess: state.Posts.isSuccess,\n        isError: state.Posts.isError,\n        isDeleteSuccess: state.deletePost.isSuccess,\n        isDeleteError: state.deletePost.isError,\n        isChangeStatusSuccess: state.status.isSuccess,\n        isChangeStatusError: state.status.isError\n    });\n\nexport default connect(mapStateToProps, {\n    posts,\n    resetSingleUser,\n    deleteUser,\n    deletePost,\n    resetDeleteUser,\n    changeStatus,\n    resetStatus\n})(withRouter(PostData));\n"]},"metadata":{},"sourceType":"module"}