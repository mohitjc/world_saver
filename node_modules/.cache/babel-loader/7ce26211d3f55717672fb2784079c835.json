{"ast":null,"code":"var _jsxFileName = \"/home/user/Documents/socialify/sociality-web/src/pages/Category.js\";\nimport React, { useState, useEffect } from 'react';\nimport { connect, useDispatch } from 'react-redux';\nimport swal from 'sweetalert';\nimport Layout from '../components/global/Layout';\nimport MainSidebar from '../components/global/MainSidebar';\nimport SectionHeader from '../components/global/SectionHeader';\nimport CategoryListing from '../components/categories/CategoryListing';\nimport CategoryForm from '../components/categories/CategoryForm';\nimport { categories, resetSingleCategory, deleteCategory, resetDeleteCategory } from '../store/actions/categoryActions';\nimport { types } from '../store/actions/typeActions';\nimport { changeStatus, resetStatus } from '../store/actions/changeStatusActions';\nimport categoryModel from '../models/category.model';\n\nconst Category = ({\n  categories,\n  data,\n  resetSingleCategory,\n  deleteCategory,\n  resetDeleteCategory,\n  isDeleteSuccess,\n  isDeleteError,\n  changeStatus,\n  resetStatus,\n  isChangeStatusSuccess,\n  isChangeStatusError,\n  isSuccess,\n  isRequesting,\n  types\n}) => {\n  const token = localStorage.getItem('token');\n  const allTypes = categoryModel.list;\n  const [page, setPage] = useState(1);\n  const [count, setCount] = useState(10);\n  const [type, setType] = useState('I');\n  const [sort, setSort] = useState(false);\n  const [sortType, setSortType] = useState('createdAt');\n  const [reloadToggle, setReloadToggle] = useState(false);\n  const [searchKeyword, setSearchKeyword] = useState('');\n  const [status, setStatus] = useState(null); // const [currentCount, setCurrentCount] = useState(count);\n\n  useEffect(() => {\n    getCategory();\n  }, [categories, reloadToggle, page, sort, searchKeyword, isDeleteSuccess, token, type, count, sortType]);\n\n  const getCategory = () => {\n    categories(token, type, page, count, sortType, sort ? 'asc' : 'desc', searchKeyword);\n  };\n\n  useEffect(() => {\n    if (isDeleteSuccess) {\n      swal('Category has been deleted!', {\n        buttons: false,\n        timer: 1500\n      });\n    }\n\n    if (isDeleteError) {\n      swal('Something went wrong!', {\n        buttons: false,\n        timer: 1500\n      });\n    }\n\n    resetDeleteCategory();\n  }, [isDeleteSuccess, isDeleteError, resetDeleteCategory]);\n  useEffect(() => {\n    if (isChangeStatusSuccess) {\n      swal(status === 'active' ? 'Category has been activated' : 'Category has been deactivated', {\n        buttons: false,\n        timer: 1500\n      });\n      setReloadToggle(!reloadToggle);\n      resetStatus();\n    }\n\n    if (isChangeStatusError) {\n      swal('Something went wrong!', {\n        buttons: false,\n        timer: 1500\n      });\n      resetStatus();\n    }\n  }, [isChangeStatusSuccess, isChangeStatusError, status, reloadToggle, resetStatus]);\n  useEffect(() => {\n    types(token);\n  }, [token, types]);\n  const [formVisibility, setFormVisibilty] = useState(false);\n  const [isAddForm, setIsAddForm] = useState(false);\n  const [categoryId, setCategoryId] = useState(null);\n  const dispatch = useDispatch();\n\n  const handleFormVisibilty = () => {\n    setFormVisibilty(!formVisibility);\n  };\n\n  const handAddFormToggle = bool => {\n    setIsAddForm(bool);\n  };\n\n  const getSuccess = (SUCCESS, data) => {\n    return {\n      type: SUCCESS,\n      payload: data\n    };\n  };\n\n  const getCategoryId = item => {\n    if (item) {\n      setCategoryId(item.id);\n      dispatch(getSuccess('GET_SINGLE_CATEGORY_SUCCESS', item));\n    } else {\n      setCategoryId('');\n    }\n  };\n\n  const getSearchKeyword = value => {\n    setSearchKeyword(value);\n  };\n\n  const getStatus = value => {\n    setStatus(value);\n  };\n\n  const toggleSort = value => {\n    setSortType(value);\n    setSort(!sort);\n  };\n\n  return /*#__PURE__*/React.createElement(Layout, {\n    title: \"Categories\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(MainSidebar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"main-content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"section\", {\n    className: \"section\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(SectionHeader, {\n    title: \"Categories\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 11\n    }\n  }), !formVisibility ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(CategoryListing, {\n    handleFormVisibilty: handleFormVisibilty,\n    categories: data && data.data && data.data.category,\n    total: data && data.data && data.data.total,\n    handAddFormToggle: handAddFormToggle,\n    getCategoryId: getCategoryId,\n    isRequesting: isRequesting // UserListing={UserListing}\n    ,\n    resetSingleCategory: resetSingleCategory,\n    deleteCategory: deleteCategory,\n    sort: sort,\n    setSort: setSort,\n    setPage: setPage,\n    page: page,\n    count: count,\n    getSearchKeyword: getSearchKeyword,\n    changeStatus: changeStatus,\n    getStatus: getStatus,\n    toggleSort: toggleSort,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 15\n    }\n  })) : /*#__PURE__*/React.createElement(CategoryForm, {\n    allTypes: allTypes,\n    getCategory: getCategory,\n    handleFormVisibilty: handleFormVisibilty,\n    isAddForm: isAddForm,\n    categoryId: categoryId,\n    setReloadToggle: setReloadToggle,\n    reloadToggle: reloadToggle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 13\n    }\n  }))));\n};\n\nconst mapStateToProps = state => ({\n  data: state.categories.data,\n  isRequesting: state.categories.isRequesting,\n  isSuccess: state.categories.isSuccess,\n  isError: state.categories.isError,\n  isDeleteSuccess: state.deleteCategory.isSuccess,\n  isDeleteError: state.deleteCategory.isError,\n  isChangeStatusSuccess: state.status.isSuccess,\n  isChangeStatusError: state.status.isError\n});\n\nexport default connect(mapStateToProps, {\n  categories,\n  resetSingleCategory,\n  deleteCategory,\n  resetDeleteCategory,\n  changeStatus,\n  resetStatus,\n  types\n})(Category);","map":{"version":3,"sources":["/home/user/Documents/socialify/sociality-web/src/pages/Category.js"],"names":["React","useState","useEffect","connect","useDispatch","swal","Layout","MainSidebar","SectionHeader","CategoryListing","CategoryForm","categories","resetSingleCategory","deleteCategory","resetDeleteCategory","types","changeStatus","resetStatus","categoryModel","Category","data","isDeleteSuccess","isDeleteError","isChangeStatusSuccess","isChangeStatusError","isSuccess","isRequesting","token","localStorage","getItem","allTypes","list","page","setPage","count","setCount","type","setType","sort","setSort","sortType","setSortType","reloadToggle","setReloadToggle","searchKeyword","setSearchKeyword","status","setStatus","getCategory","buttons","timer","formVisibility","setFormVisibilty","isAddForm","setIsAddForm","categoryId","setCategoryId","dispatch","handleFormVisibilty","handAddFormToggle","bool","getSuccess","SUCCESS","payload","getCategoryId","item","id","getSearchKeyword","value","getStatus","toggleSort","category","total","mapStateToProps","state","isError"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { connect, useDispatch } from 'react-redux';\n\nimport swal from 'sweetalert';\nimport Layout from '../components/global/Layout';\nimport MainSidebar from '../components/global/MainSidebar';\nimport SectionHeader from '../components/global/SectionHeader';\nimport CategoryListing from '../components/categories/CategoryListing';\nimport CategoryForm from '../components/categories/CategoryForm';\nimport {\n  categories,\n  resetSingleCategory,\n  deleteCategory,\n  resetDeleteCategory\n} from '../store/actions/categoryActions';\nimport { types } from '../store/actions/typeActions';\n\nimport {\n  changeStatus,\n  resetStatus\n} from '../store/actions/changeStatusActions';\nimport categoryModel from '../models/category.model';\n\nconst Category = ({\n  categories,\n  data,\n  resetSingleCategory,\n  deleteCategory,\n  resetDeleteCategory,\n  isDeleteSuccess,\n  isDeleteError,\n  changeStatus,\n  resetStatus,\n  isChangeStatusSuccess,\n  isChangeStatusError,\n  isSuccess,\n  isRequesting,\n  types\n}) => {\n  const token = localStorage.getItem('token');\n  const allTypes=categoryModel.list;\n  const [page, setPage] = useState(1);\n  const [count, setCount] = useState(10);\n  const [type, setType] = useState('I');\n  const [sort, setSort] = useState(false);\n  const [sortType, setSortType] = useState('createdAt');\n  const [reloadToggle, setReloadToggle] = useState(false);\n  const [searchKeyword, setSearchKeyword] = useState('');\n  const [status, setStatus] = useState(null);\n  // const [currentCount, setCurrentCount] = useState(count);\n\n  useEffect(() => {\n    getCategory()\n  }, [\n    categories,\n    reloadToggle,\n    page,\n    sort,\n    searchKeyword,\n    isDeleteSuccess,\n    token,\n    type,\n    count,\n    sortType\n  ]);\n\n const getCategory=()=>{\n  categories(\n    token,\n    type,\n    page,\n    count,\n    sortType,\n    sort ? 'asc' : 'desc',\n    searchKeyword\n  );\n  }\n\n  useEffect(() => {\n    if (isDeleteSuccess) {\n      swal('Category has been deleted!', {\n        buttons: false,\n        timer: 1500\n      });\n    }\n\n    if (isDeleteError) {\n      swal('Something went wrong!', {\n        buttons: false,\n        timer: 1500\n      });\n    }\n    resetDeleteCategory();\n  }, [isDeleteSuccess, isDeleteError, resetDeleteCategory]);\n\n  useEffect(() => {\n    if (isChangeStatusSuccess) {\n      swal(\n        status === 'active'\n          ? 'Category has been activated'\n          : 'Category has been deactivated',\n        {\n          buttons: false,\n          timer: 1500\n        }\n      );\n      setReloadToggle(!reloadToggle);\n      resetStatus();\n    }\n\n    if (isChangeStatusError) {\n      swal('Something went wrong!', {\n        buttons: false,\n        timer: 1500\n      });\n      resetStatus();\n    }\n  }, [\n    isChangeStatusSuccess,\n    isChangeStatusError,\n    status,\n    reloadToggle,\n    resetStatus\n  ]);\n\n  useEffect(() => {\n    types(token);\n  }, [token, types]);\n\n  const [formVisibility, setFormVisibilty] = useState(false);\n  const [isAddForm, setIsAddForm] = useState(false);\n  const [categoryId, setCategoryId] = useState(null);\n  const dispatch=useDispatch()\n\n  const handleFormVisibilty = () => {\n    setFormVisibilty(!formVisibility);\n  };\n\n  const handAddFormToggle = bool => {\n    setIsAddForm(bool);\n  };\n\n  const getSuccess=(SUCCESS, data)=> {\n    return {\n      type: SUCCESS,\n      payload: data\n    };\n  }\n\n  const getCategoryId = item => {\n    if(item){\n      setCategoryId(item.id);\n      dispatch(\n        getSuccess(\n          'GET_SINGLE_CATEGORY_SUCCESS',\n          item\n        )\n      );\n    }else{\n      setCategoryId('');\n    }\n  };\n\n  const getSearchKeyword = value => {\n    setSearchKeyword(value);\n  };\n\n  const getStatus = value => {\n    setStatus(value);\n  };\n\n  const toggleSort = value => {\n    setSortType(value);\n    setSort(!sort);\n  };\n\n\n  return (\n    <Layout title=\"Categories\">\n      <MainSidebar />\n      <div className=\"main-content\">\n        <section className=\"section\">\n          <SectionHeader title=\"Categories\" />\n          {!formVisibility ? (\n            <>\n              <CategoryListing\n                handleFormVisibilty={handleFormVisibilty}\n                categories={data && data.data && data.data.category}\n                total={data && data.data && data.data.total}\n                handAddFormToggle={handAddFormToggle}\n                getCategoryId={getCategoryId}\n                isRequesting={isRequesting}\n                // UserListing={UserListing}\n                resetSingleCategory={resetSingleCategory}\n                deleteCategory={deleteCategory}\n                sort={sort}\n                setSort={setSort}\n                setPage={setPage}\n                page={page}\n                count={count}\n                getSearchKeyword={getSearchKeyword}\n                changeStatus={changeStatus}\n                getStatus={getStatus}\n                toggleSort={toggleSort}\n              />\n            </>\n          ) : (\n            <CategoryForm\n              allTypes={allTypes}\n              getCategory={getCategory}\n              handleFormVisibilty={handleFormVisibilty}\n              isAddForm={isAddForm}\n              categoryId={categoryId}\n              setReloadToggle={setReloadToggle}\n              reloadToggle={reloadToggle}\n            />\n          )}\n        </section>\n      </div>\n    </Layout>\n  );\n};\n\nconst mapStateToProps = state => ({\n  data: state.categories.data,\n  isRequesting: state.categories.isRequesting,\n  isSuccess: state.categories.isSuccess,\n  isError: state.categories.isError,\n  isDeleteSuccess: state.deleteCategory.isSuccess,\n  isDeleteError: state.deleteCategory.isError,\n  isChangeStatusSuccess: state.status.isSuccess,\n  isChangeStatusError: state.status.isError\n});\n\nexport default connect(mapStateToProps, {\n  categories,\n  resetSingleCategory,\n  deleteCategory,\n  resetDeleteCategory,\n  changeStatus,\n  resetStatus,\n  types\n})(Category);\n"]},"metadata":{},"sourceType":"module"}